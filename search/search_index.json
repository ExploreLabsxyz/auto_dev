{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#project-status-badges","title":"Project Status Badges","text":""},{"location":"#autonomy-dev","title":"Autonomy Dev","text":"<p>Tooling to speed up open-autonomy development.</p>"},{"location":"#tldr","title":"TLDR","text":"<pre><code># install \npip install autonomy-dev[all]\n</code></pre> <pre><code># create a repo &amp; a simple webserver agent\nadev repo scaffold fun_new_hack &amp;&amp; \\\ncd fun_new_hack &amp;&amp; \\\nadev create author/cool_agent \\\n    -t eightballer/frontend_agent # type of template to use.\n# sync to the local registry.\nyes 'third_party' | autonomy packages lock\n</code></pre> <pre><code># run the agent and verify the endpoint\n</code></pre>"},{"location":"#usage","title":"Usage","text":"<p>There are a number of useful command tools available.</p> <ul> <li> <p>Dev Tooling:     A). linting <code>adev lint</code>     B). formatting <code>adev fmt</code>     C). dependency management <code>adev deps update</code></p> </li> <li> <p>Scaffolding: Tooling to auto generate repositories and components.</p> </li> </ul>"},{"location":"#create","title":"Create","text":"<ul> <li>Templated agents for speedy proof of concept and getting started fast.</li> </ul>"},{"location":"#scaffolding-of-components","title":"Scaffolding of Components","text":""},{"location":"#protocols","title":"Protocols","text":"<p>We provide tools to generate protocols components from specs.</p> <pre><code>adev create author/tmp_agent_name -t eightballer/base --force\ncd tmp_agent_name\nadev scaffold protocol ../specs/protocols/balances.yaml \naea -s publish --push-missing\n...\nStarting Auto Dev v0.2.75 ...\nUsing 32 processes for processing\nSetting log level to INFO\nCreating agent tmp_agent_name from template eightballer/base\nExecuting command: ['poetry', 'run', 'autonomy', 'fetch', 'bafybeidohldv57m3jkc33zpgbxukaushmcibmt4ncnsnomd3pvpocxs3ui', '--alias', 'tmp_agent_name']\nCommand executed successfully.\nAgent tmp_agent_name created successfully.\nStarting Auto Dev v0.2.75 ...\nUsing 32 processes for processing\nSetting log level to INFO\nRead protocol specification: ../specs/protocols/balances.yaml\nprotolint version 0.50.0(d6a3250)\nprotolint version 0.50.0(d6a3250)\nUpdated: /home/eight/Projects/StationsStation/repos/capitalisation_station/tmp_agent_name/protocols/balances/custom_types.py\nNew protocol scaffolded at /home/eight/Projects/StationsStation/repos/capitalisation_station/tmp_agent_name/protocols/balances\n\n...\n# Tests can be run as well;\nadev test -p packages/eightballer/protocols/balances\nTesting path: `packages/eightballer/protocols/balances/` \u231b\nTesting... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501   0% -:--:--\ud83d\udc4c - packages/eightballer/protocols/balances/\nTesting... \u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501\u2501 100% 0:00:02\nTesting completed successfully! \u2705\n</code></pre>"},{"location":"#contracts","title":"Contracts","text":"<p>We can scaffold a new contract using the <code>adev scaffold contract</code> command. This will create a new directory with; - open-aea contract component     - open-aea contract component class \ud83c\udf89     - open-aea contract component function generation \ud83d\udea7     - open-aea contract component test generation \ud83d\udea7</p> <pre><code>adev scaffold contract 0xc939df369C0Fc240C975A6dEEEE77d87bCFaC259 beyond_pricer \\\n      --block-explorer-api-key $BLOCK_EXPLORER_API_KEY \\\n      --block-explorer-url \"https://api-goerli.arbiscan.io\"\n</code></pre>"},{"location":"#installation","title":"Installation","text":"<pre><code>pip install autonomy-dev[all]\n</code></pre>"},{"location":"#release","title":"Release","text":"<pre><code>checkout main\ngit pull\nadev release\n</code></pre>"},{"location":"#test-coverage","title":"Test Coverage","text":"<pre><code>&lt;!-- Pytest Coverage Comment:Begin --&gt;\nName                             Stmts   Miss  Cover   Missing\n--------------------------------------------------------------\nauto_dev/__init__.py                 0      0   100%\nauto_dev/base.py                    60     19    68%   66-88\nauto_dev/check_dependencies.py     236    236     0%   28-452\nauto_dev/cli.py                      4      1    75%   9\nauto_dev/cli_executor.py            68     36    47%   33-61, 79, 83, 87-89, 92-94, 99-105\nauto_dev/constants.py               25      0   100%\nauto_dev/enums.py                   36      0   100%\nauto_dev/exceptions.py               5      0   100%\nauto_dev/fmt.py                     59     43    27%   16-17, 21-22, 27-45, 50, 60-61, 66-80, 85-97, 102-112\nauto_dev/lint.py                     7      3    57%   13-27\nauto_dev/local_fork.py              52     32    38%   32-33, 37-54, 58-95\nauto_dev/test.py                    16     13    19%   4, 16-39\nauto_dev/utils.py                  251    153    39%   76-77, 81, 94-101, 106-151, 167, 180-185, 204-228, 233, 240-242, 247, 252, 257-269, 276-281, 290-293, 298-318, 323-337, 342-348, 370-372, 381, 388-416\n--------------------------------------------------------------\nTOTAL                              819    536    35%\n&lt;!-- Pytest Coverage Comment:End --&gt;\n</code></pre>"},{"location":"#documentation","title":"Documentation","text":""},{"location":"#running-docs-locally","title":"Running Docs Locally","text":"<p>To run and preview the documentation locally:</p> <pre><code># Install mkdocs and required dependencies\npip install mkdocs-material mkdocstrings[python] mkdocs-include-markdown-plugin mkdocs-mermaid2-plugin\n\n# Serve the documentation (available at http://127.0.0.1:8000)\nmkdocs serve\n</code></pre> <p>This will start a local server and automatically reload when you make changes to the documentation.</p>"},{"location":"changelog/","title":"Changelog","text":""},{"location":"changelog/#changelog","title":"Changelog","text":""},{"location":"changelog/#010-2022-08-20","title":"0.1.0 (2022-08-20)","text":"<ul> <li>First release on PyPI.</li> </ul>"},{"location":"dao/","title":"Dao","text":""},{"location":"dao/#scaffolding-a-new-dao","title":"Scaffolding a new DAO","text":"<p>The tools within the <code>dao</code> subcommand are used to scaffold a new DAO (Data Access Object) based on an OpenAPI 3 specification. This process automates the creation of DAO classes, dummy data, and test scripts.</p>"},{"location":"dao/#prerequisites","title":"Prerequisites","text":"<ol> <li>An OpenAPI 3 specification file with components/schema models defined.</li> <li>A <code>component.yaml</code> file in the current directory that references the OpenAPI specification using the <code>api_spec</code> field.</li> </ol>"},{"location":"dao/#steps-to-scaffold-a-dao","title":"Steps to Scaffold a DAO","text":"<ol> <li>Ensure you have the OpenAPI 3 specification file. You can view its contents using:</li> </ol> <pre><code>cat auto_dev/data/openapi/openapi_specification.yaml\n</code></pre> <ol> <li>Create or update the <code>component.yaml</code> file to reference the OpenAPI specification using the <code>api_spec</code> field.</li> </ol> <pre><code>api_spec: &lt;path_to_openapi_specification.yaml&gt;\n</code></pre> <ol> <li>Run the DAO scaffolding command:</li> </ol> <pre><code>adev scaffold dao\n</code></pre> <p>The scaffolding process creates the following:</p> <ol> <li>DAO Classes: For each model defined in the OpenAPI specification, a corresponding DAO class is generated.</li> <li>Dummy Data: </li> <li>Aggregated dummy data for all models</li> <li>Individual dummy data instances for testing</li> <li>Test Script: A test script to validate the generated DAO classes</li> </ol> <p>To identify the persistent schemas, the scaffolder uses the following logic:</p> <ol> <li>It checks whether custom x-persistent field is set to true for a schema. If it is, the schema is identified as a persistent schema.</li> </ol> <pre><code>components:\n   schemas:\n      User:\n         x-persistent: true  # Marking the schema as persistent\n         type: object\n         properties:\n            name:\n               type: string\n               ...\n</code></pre> <ol> <li>If no x-persistent tags are found, it then attempts to identify all the schemas in the OpenAPI specification by checking if they are used in any request or response.</li> <li>If the schema is used in a request and is used in multiple contexts (request or response), it is identified as a persistent schema.</li> </ol>"},{"location":"dao/#generated-file-structure","title":"Generated File Structure","text":"<p>After running the scaffold command, you'll find the following structure in your project:</p> <pre><code>generated/\n\u251c\u2500\u2500 dao/\n\u2502 \u251c\u2500\u2500 &lt;model_name_1&gt;dao.py\n\u2502 \u251c\u2500\u2500 &lt;model_name_2&gt;dao.py\n\u2502 \u2514\u2500\u2500 ...\n\u251c\u2500\u2500 aggregated_data.json\n\u2514\u2500\u2500 test_dao.py\n</code></pre>"},{"location":"dao/#how-it-works","title":"How It Works","text":"<p>The scaffolding process involves several steps:</p> <ol> <li>Loading and validating the OpenAPI specification (checking for required fields, etc.)</li> <li>Generating DAO classes for each model</li> <li>Creating dummy data for testing</li> <li>Generating a test script</li> </ol> <p>For more details on the implementation, refer to: <code>auto_dev/dao/scaffolder.py</code></p>"},{"location":"dao/#customization","title":"Customization","text":"<p>The generated DAO classes use Jinja2 templates for customization. If you need to modify the structure of the generated classes, you can update the templates located in the <code>auto_dev/data/templates/dao</code> directory.</p>"},{"location":"dao/#error-handling","title":"Error Handling","text":"<p>The scaffolding process includes comprehensive error handling to catch issues such as: - Missing or invalid OpenAPI specification - YAML or JSON parsing errors - File I/O errors</p> <p>If any errors occur during the scaffolding process, detailed error messages will be logged to help with troubleshooting.</p>"},{"location":"dao/#next-steps","title":"Next Steps","text":"<p>After scaffolding your DAO:</p> <ol> <li>Review the generated DAO classes in the <code>generated/dao/</code> directory.</li> <li>Examine the <code>aggregated_data.json</code> file for the structure of the dummy data.</li> <li>Run the <code>test_dao.py</code> script to ensure the basic functionality of your DAOs.</li> <li>Customize the generated classes as needed for your specific use case.</li> </ol> <p>Remember to regenerate the DAOs if you make changes to your OpenAPI specification to keep them in sync.</p>"},{"location":"fsm/","title":"FSM","text":""},{"location":"fsm/#scaffolding-a-new-fsm-agent","title":"Scaffolding a new FSM agent.","text":"<p>It can be difficult to scaffold an initial agent to begin development of the fsm.</p> <p>The tools within the <code>fsm</code> subcommand are used to scaffold a new agent.</p> <p>We start with a simple fsm;</p> <pre><code>cat auto_dev/data/fsm/fsm_specification.yaml\n</code></pre> <p>Output: <pre><code>alphabet_in:\n- DONE\n- NO_MAJORITY\n- TIMEOUT\ndefault_start_state: FirstRound\nfinal_states:\n- ErrorRound\n- FinalRound\nlabel: DummyAbciApp\nstart_states:\n- FirstRound\nstates:\n- FirstRound\n- FinalRound\n- ErrorRound\ntransition_func:\n  (FirstRound, DONE): FinalRound\n  (FirstRound, NO_MAJORITY): ErrorRound\n  (FirstRound, TIMEOUT): ErrorRound\n</code></pre></p> <p>We can then convert this to a mermaid diagram using the adev tool.</p> <pre><code>adev fsm from-file auto_dev/data/fsm/fsm_specification.yaml --output mermaid DemoAbciApp\n</code></pre> <p>Output: <pre><code>graph TD\n  FirstRound\n  FirstRound\n  FinalRound\n  ErrorRound\n  FirstRound --&gt;|DONE| FinalRound\n  FirstRound --&gt;|NO_MAJORITY| ErrorRound\n  FirstRound --&gt;|TIMEOUT| ErrorRound\n</code></pre> which can be rendered as a mermaid diagram as so;</p> <pre><code>graph TD\n  FirstRound\n  FirstRound\n  FinalRound\n  ErrorRound\n  FirstRound --&gt;|DONE| FinalRound\n  FirstRound --&gt;|NO_MAJORITY| ErrorRound\n  FirstRound --&gt;|TIMEOUT| ErrorRound\n</code></pre> <p>We now scaffold the agent.</p> <p><pre><code>adev create -t eightballer/base author/new_agent\n</code></pre> We now have a new agent.</p> <pre><code>cd new_agent\n</code></pre> <p>This creates a new agent without any real skills.</p> <p>Once we have a new agent, we can first scaffold the skill using the CORE autonomy libraries.</p> <p>This reduces the amount of code we need to write to get a skill up and means that we have no need to write any code to re-implement the wheel.</p> <pre><code>adev scaffold fsm --spec ../auto_dev/data/fsm/fsm_specification.yaml\n</code></pre> <p>We now have an agent with a new skill, HOWEVER The agent will not run.</p> <p>One of the main reasons for this is that the agent is not configured to use the <code>aea_ledger_ethereum</code> package.</p> <p>Additionally,</p> <p>A number of connections need to be updated such that when deploying a service, the environment variables are set correctly.</p>"},{"location":"fsm/#setup-the-agent","title":"setup the agent","text":"<p><pre><code>aea generate-key ethereum\n</code></pre> <pre><code>aea add-key ethereum\n</code></pre></p> <pre><code>echo run the agent with `aea run`\n</code></pre>"},{"location":"installation/","title":"Installation","text":""},{"location":"installation/#installation","title":"Installation","text":""},{"location":"installation/#stable-release","title":"Stable release","text":"<p>To install auto_dev, run this command in your terminal:</p> <pre><code>$ pip install auto_dev\n</code></pre> <p>This is the preferred method to install auto_dev, as it will always install the most recent stable release.</p> <p>If you don't have pip installed, this Python installation guide can guide you through the process.</p>"},{"location":"installation/#from-source","title":"From source","text":"<p>The source for auto_dev can be downloaded from the Github repo.</p> <p>You can either clone the public repository:</p> <pre><code>$ git clone git://github.com/8ball030/auto_dev\n</code></pre> <p>Or download the tarball:</p> <pre><code>$ curl -OJL https://github.com/8ball030/auto_dev/tarball/master\n</code></pre> <p>Once you have a copy of the source, you can install it with:</p> <pre><code>$ pip install .\n</code></pre>"},{"location":"openapi/","title":"OpenAPI","text":""},{"location":"openapi/#scaffolding-a-new-api-handler-agent","title":"Scaffolding a new API Handler agent.","text":"<p>The tools within the <code>handler</code> subcommand are used to scaffold a new agent.</p> <p>We start with a simple openapi;</p> <pre><code>cat auto_dev/data/openapi/openapi_specification.yaml\n</code></pre> <p>We now scaffold the agent and cd in.</p> <pre><code>aea create new_agent &amp;&amp; cd new_agent\n</code></pre> <p>This creates a new agent without any real skills.</p> <p>Once we have a new agent, we can now use the cli to scaffold the skill using the CORE autonomy libraries and the OpenAPI specification.</p> <p>This reduces the amount of code we need to write to get a skill up and means that we have no need to write any code to re-implement the wheel.</p>"},{"location":"openapi/#scaffolding-a-new-skill","title":"Scaffolding a new skill","text":"<p>Use the --new-skill flag to scaffold a new skill.</p> <pre><code>adev scaffold handler ../auto_dev/data/openapi/openapi_specification.yaml --output my_api_skill --new-skill\n</code></pre> <p>The skill will be created in the skills directory.  The user will be prompted whether to rename MyModel.py to strategy.py, and whether to remove the dialogues.py file. THe scaffolding step will also install the http protocol, and fingerprint the skill.  At the completion, the user can now run the agent.</p> <pre><code>aea run\n</code></pre>"},{"location":"openapi/#augmenting-with-an-openapi-handler","title":"Augmenting with an OpenAPI Handler","text":"<p>The tools within the <code>openapi</code> subcommand are used to augment a customs component with a new handler based on an OpenAPI 3 specification. This process automates the creation of endpoints methods. </p>"},{"location":"openapi/#prerequisites","title":"Prerequisites","text":"<ol> <li>An OpenAPI 3 specification file with paths, operationIds, and schemas defined.</li> <li>A <code>component.yaml</code> file in the current directory that references the OpenAPI specification using the <code>api_spec</code> field.</li> <li>DAOs for each schema in the OpenAPI specification (see dao docs for how to scaffold these).</li> </ol>"},{"location":"openapi/#steps-to-augment-a-handler","title":"Steps to Augment a Handler","text":"<ol> <li>Ensure you have the OpenAPI 3 specification file. You can view its contents using:</li> </ol> <pre><code>cat auto_dev/data/openapi/openapi_specification.yaml\n</code></pre> <ol> <li>Create or update the <code>component.yaml</code> file to reference the OpenAPI specification using the <code>api_spec</code> field.</li> </ol> <pre><code>api_spec: &lt;path_to_openapi_specification.yaml&gt;\n</code></pre> <ol> <li>Run the Handler augmenting command:</li> </ol> <pre><code>adev augment customs openapi3\n</code></pre> <p>The augmenting process creates the following: </p> <ol> <li>Handler methods: For each path defined in the OpenAPI specification, a corresponding handler method is generated, along with a general handler and resolver method.</li> <li>Dialogues.py: A boilerplate dialogues file is generated.</li> </ol>"},{"location":"openapi/#how-it-works","title":"How It Works","text":"<p>The augmentation process involves several steps:</p> <ol> <li>Loading and validating the OpenAPI specification</li> <li>Generating Handler methods for each path</li> </ol> <p>For more details on the implementation, refer to: <code>auto_dev/handler/scaffolder.py</code></p>"},{"location":"openapi/#customization","title":"Customization","text":"<p>The generated Handler methods use Jinja2 templates for customization. If you need to modify the structure of the generated classes, you can update the templates located in the <code>JINJA_TEMPLATE_FOLDER</code>.</p>"},{"location":"openapi/#next-steps","title":"Next Steps","text":"<p>After augmenting your handler:</p> <ul> <li>Review the generated handler methods in the <code>handlers.py</code> file.</li> </ul> <p>Remember to regenerate the Handlers if you make changes to your OpenAPI specification to keep them in sync.</p>"},{"location":"usage/","title":"Overview","text":""},{"location":"usage/#usage","title":"Usage","text":"<p>To use auto_dev in a project</p> <pre><code>import auto_dev\n</code></pre>"},{"location":"api/","title":"Overview","text":""},{"location":"api/#api-reference-overview","title":"API Reference Overview","text":"<p>This section provides detailed information about the auto_dev API. Use the navigation menu to explore specific modules and components.</p>"},{"location":"api/#main-modules","title":"Main Modules","text":"<ul> <li>auto_dev: Core functionality</li> <li>Commands: CLI commands</li> <li>Connections: Network connections</li> <li>Contracts: Smart contract interactions</li> <li>FSM: Finite State Machine implementation</li> <li>Handler: Request handling</li> <li>Protocols: Communication protocols</li> <li>Utils: Utility functions</li> <li>Constants: Constant values used across the project</li> </ul>"},{"location":"api/auto_dev/","title":"auto_dev","text":""},{"location":"api/auto_dev/#api-reference","title":"API Reference","text":""},{"location":"api/auto_dev/#auto-dev-module","title":"Auto Dev module","text":""},{"location":"api/auto_dev/#auto_dev","title":"<code>auto_dev</code>","text":"<p>Auto-dev tooling.</p>"},{"location":"api/auto_dev/#auto_dev.base","title":"<code>base</code>","text":"<p>Base CLI for auto_dev.</p>"},{"location":"api/auto_dev/#auto_dev.base.CLIs","title":"<code>CLIs</code>  <code>dataclass</code>","text":"<p>Base CLI class configurable with plugins.</p>"},{"location":"api/auto_dev/#auto_dev.base.CLIs.get_all_commands","title":"<code>get_all_commands()</code>","text":"<p>Iterate over all commands.</p>"},{"location":"api/auto_dev/#auto_dev.base.CLIs.get_command","title":"<code>get_command(name)</code>","text":"<p>Get the command.</p>"},{"location":"api/auto_dev/#auto_dev.base.CLIs.list_commands","title":"<code>list_commands()</code>","text":"<p>List commands.</p>"},{"location":"api/auto_dev/#auto_dev.base.build_cli","title":"<code>build_cli(plugins=False)</code>","text":"<p>Build the CLI.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours","title":"<code>behaviours</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder","title":"<code>scaffolder</code>","text":"<p>Protocol scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder.BehaviourScaffolder","title":"<code>BehaviourScaffolder</code>","text":"<p>               Bases: <code>ProtocolScaffolder</code></p> <p>ProtocolScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder.BehaviourScaffolder.scaffold","title":"<code>scaffold</code>  <code>property</code>","text":"<p>Scaffold the protocol.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder.BehaviourScaffolder.template","title":"<code>template</code>  <code>property</code>","text":"<p>Get the template.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder.BehaviourScaffolder.__init__","title":"<code>__init__(protocol_specification_path, behaviour_type, logger, verbose=True, auto_confirm=False)</code>","text":"<p>Initialize ProtocolScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder.BehaviourScaffolder.get_data_types","title":"<code>get_data_types(protocol_specification)</code>","text":"<p>Get the data types.</p>"},{"location":"api/auto_dev/#auto_dev.behaviours.scaffolder.get_py_type_and_args","title":"<code>get_py_type_and_args(arg, arg_type, type_map)</code>","text":"<p>Get the python type and arguments from a protobuf type.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies","title":"<code>check_dependencies</code>","text":"<p>This script checks that the pipfile of the repository meets the requirements.</p> <p>In particular: - Avoid the usage of \"*\"</p> <p>It is assumed the script is run from the repository root.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PathArgument","title":"<code>PathArgument</code>","text":"<p>               Bases: <code>Path</code></p> <p>Path parameter for CLI.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PathArgument.convert","title":"<code>convert(value, param, ctx)</code>","text":"<p>Convert path string to <code>pathlib.Path</code></p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile","title":"<code>Pipfile</code>","text":"<p>Class to represent Pipfile config.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.__init__","title":"<code>__init__(sources, packages, dev_packages, file)</code>","text":"<p>Initialize object.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate dependencies as from aea.configurations.data_types.Dependency object.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.check","title":"<code>check(dependency)</code>","text":"<p>Check dependency specifier</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.compile","title":"<code>compile()</code>","text":"<p>Compile to Pipfile string.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.dump","title":"<code>dump()</code>","text":"<p>Write to Pipfile.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.load","title":"<code>load(file)</code>  <code>classmethod</code>","text":"<p>Load from file.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.parse","title":"<code>parse(content)</code>  <code>classmethod</code>","text":"<p>Parse from string.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.Pipfile.update","title":"<code>update(dependency)</code>","text":"<p>Update dependency specifier</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml","title":"<code>PyProjectToml</code>","text":"<p>Class to represent pyproject.toml file.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml.__init__","title":"<code>__init__(dependencies, config, file)</code>","text":"<p>Initialize object.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml.__iter__","title":"<code>__iter__()</code>","text":"<p>Iterate dependencies as from aea.configurations.data_types.Dependency object.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml.check","title":"<code>check(dependency)</code>","text":"<p>Check dependency specifier</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml.dump","title":"<code>dump()</code>","text":"<p>Dump to file.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml.load","title":"<code>load(pyproject_path)</code>  <code>classmethod</code>","text":"<p>Load pyproject.yaml dependencies</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.PyProjectToml.update","title":"<code>update(dependency)</code>","text":"<p>Update dependency specifier</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.load_packages_dependencies","title":"<code>load_packages_dependencies(packages_dir)</code>","text":"<p>Returns a list of package dependencies.</p>"},{"location":"api/auto_dev/#auto_dev.check_dependencies.main","title":"<code>main(check=False, packages_dir=None, pipfile_path=None, pyproject_path=None)</code>","text":"<p>Check dependencies across packages, tox.ini, pyproject.toml and setup.py</p>"},{"location":"api/auto_dev/#auto_dev.cli","title":"<code>cli</code>","text":"<p>Simple cli to allow users to perform the following actions against an autonomy repo.</p>"},{"location":"api/auto_dev/#auto_dev.cli_executor","title":"<code>cli_executor</code>","text":"<p>Simple command execution class. It is used to execute commands in a subprocess and return the output. It is also used to check if a command was successful or not. It is used by the lint and test functions.</p>"},{"location":"api/auto_dev/#auto_dev.cli_executor.CommandExecutor","title":"<code>CommandExecutor</code>","text":"<p>A simple command executor.</p>"},{"location":"api/auto_dev/#auto_dev.cli_executor.CommandExecutor.output","title":"<code>output</code>  <code>property</code>","text":"<p>Return the output.</p>"},{"location":"api/auto_dev/#auto_dev.cli_executor.CommandExecutor.__init__","title":"<code>__init__(command, cwd=None)</code>","text":"<p>Initialize the command executor.</p>"},{"location":"api/auto_dev/#auto_dev.cli_executor.CommandExecutor.execute","title":"<code>execute(stream=False, verbose=True, shell=False)</code>","text":"<p>Execute the command.</p>"},{"location":"api/auto_dev/#auto_dev.commands","title":"<code>commands</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment","title":"<code>augment</code>","text":"<p>Implement scaffolding tooling.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.BaseScaffolder","title":"<code>BaseScaffolder</code>","text":"<p>BaseScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.BaseScaffolder.__init__","title":"<code>__init__()</code>","text":"<p>Init scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.BaseScaffolder.load","title":"<code>load()</code>","text":"<p>Load.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.ConnectionScaffolder","title":"<code>ConnectionScaffolder</code>","text":"<p>               Bases: <code>BaseScaffolder</code></p> <p>ConnectionScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.ConnectionScaffolder.generate","title":"<code>generate(connections)</code>","text":"<p>Generate connections.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.ConnectionScaffolder.scaffold","title":"<code>scaffold(connections)</code>","text":"<p>Scaffold connection.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.LoggingScaffolder","title":"<code>LoggingScaffolder</code>","text":"<p>               Bases: <code>BaseScaffolder</code></p> <p>Logging scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.LoggingScaffolder.generate","title":"<code>generate(handlers)</code>","text":"<p>Scaffold logging.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.LoggingScaffolder.scaffold","title":"<code>scaffold(handlers)</code>","text":"<p>Scaffold logging.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.augment","title":"<code>augment()</code>","text":"<p>Scaffold commands.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.connection","title":"<code>connection(connections)</code>","text":"<p>Augment an AEA configuration with connections.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.customs","title":"<code>customs(ctx, component_type, auto_confirm)</code>","text":"<p>Augment a customs component with OpenAPI3 handlers.</p>"},{"location":"api/auto_dev/#auto_dev.commands.augment.logging","title":"<code>logging(handlers)</code>","text":"<p>Augment an aeas logging configuration.</p>"},{"location":"api/auto_dev/#auto_dev.commands.create","title":"<code>create</code>","text":"<p>This module contains the logic for the fmt command.</p>"},{"location":"api/auto_dev/#auto_dev.commands.create.create","title":"<code>create(ctx, public_id, template, force, publish, clean_up)</code>","text":"<p>Create a new agent from a template.</p> <p>:flag  template: the template to use.</p> <p>example usage:     <code>adev create -t eightballer/frontend_agent new_author/new_agent</code></p> <p>Parameters:</p> Name Type Description Default <code>public_id</code> <code>str</code> <p>the public_id of the agent in the open-autonmy format i.e. <code>author/agent</code></p> required"},{"location":"api/auto_dev/#auto_dev.commands.create.get_available_agents","title":"<code>get_available_agents()</code>","text":"<p>Get the available agents.</p>"},{"location":"api/auto_dev/#auto_dev.commands.create.publish_agent","title":"<code>publish_agent(public_id, verbose)</code>","text":"<p>Publish an agent.</p> <p>Parameters:</p> Name Type Description Default <code>public_id</code> <code>PublicId</code> <p>the public_id of the agent.</p> required"},{"location":"api/auto_dev/#auto_dev.commands.create.update_author","title":"<code>update_author(public_id)</code>","text":"<p>Update the author in the recently created agent</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps","title":"<code>deps</code>","text":"<p>reads in 2 github repos.</p> <p>One is the parent repo, the other is the child repo.</p> <p>The child repo is dependent on the parent repo.</p> <p>When there is a change in the parent repo, we want to update the child repo.</p> <p>The dependencies are defined in a file called packages/packages.json</p> <p>this is structures as follows:</p> <p>{     \"dev\": {         \"aea_dep1\": \"ipfshash\",         \"aea_dep2\": \"ipfshash\",         },     \"third_party\": {         \"aea_dep3\": \"ipfshash\",         \"aea_dep4\": \"ipfshash\",         }, }</p> <p>The ipfshash is the hash of the package.</p> <p>We want to be able to update the hash of the package.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.DEFAULT_ADEV_CONFIG_FILE","title":"<code>DEFAULT_ADEV_CONFIG_FILE = Path('adev_config.yaml')</code>  <code>module-attribute</code>","text":"<ul> <li>name: open-autonomy     version: 0.15.2     location: remote     url: https://api.github.com/repos/valory-xyz/open-autonomy</li> <li>name: open-aea     version: 1.55.0     location: remote     url: https://api.github.com/repos/valory-xyz/open-aea</li> </ul> <p>poetry_dependencies:   - name: autonomy-dev     version: 0.2.73     location: remote     url: https://api.github.com/repos/8ball030/auto_dev     extras:       - all   - name: open-autonomy     version: 0.15.2     location: remote     url: https://api.github.com/repos/valory-xyz/open-autonomy   - name: open-aea     version: 1.55.0     location: remote     url: https://api.github.com/repos/valory-xyz/open-aea     plugins:       - open-aea-ledger-ethereum       - open-aea-ledger-solana       - open-aea-ledger-cosmos       - open-aea-cli-ipfs</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.AutonomyDependencies","title":"<code>AutonomyDependencies</code>  <code>dataclass</code>","text":"<p>A set of autonomy versions.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.AutonomyDependencies.to_dict","title":"<code>to_dict()</code>","text":"<p>return a list of the upstream dependencies.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.AutonomyDependency","title":"<code>AutonomyDependency</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Dependency</code></p> <p>An autonomy dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.Dependency","title":"<code>Dependency</code>  <code>dataclass</code>","text":"<p>A dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.DependencyLocation","title":"<code>DependencyLocation</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Location of the dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.DependencyType","title":"<code>DependencyType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Type of dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.GitDependency","title":"<code>GitDependency</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Dependency</code></p> <p>A git dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.GitDependency.headers","title":"<code>headers</code>  <code>property</code>","text":"<p>Get the headers.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.GitDependency.get_all_autonomy_packages","title":"<code>get_all_autonomy_packages()</code>","text":"<p>Read in the autonomy packages. the are located in the remote url.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.GitDependency.get_latest_version","title":"<code>get_latest_version()</code>","text":"<p>Get the latest version.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.PoetryDependencies","title":"<code>PoetryDependencies</code>  <code>dataclass</code>","text":"<p>A set of poetry dependencies.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.PoetryDependencies.to_dict","title":"<code>to_dict()</code>","text":"<p>return a list of the poetry dependencies.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.PythonDependency","title":"<code>PythonDependency</code>  <code>dataclass</code>","text":"<p>               Bases: <code>Dependency</code></p> <p>A python dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.VersionSetLoader","title":"<code>VersionSetLoader</code>","text":"<p>We load the version set.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.VersionSetLoader.load_config","title":"<code>load_config()</code>","text":"<p>Load the config file.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.VersionSetLoader.write_config","title":"<code>write_config()</code>","text":"<p>Write the config file.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.deps","title":"<code>deps(ctx)</code>","text":"<p>Commands for managing dependencies. - update: Update both the packages.json from the parent repo and the packages in the child repo. - generate_gitignore: Generate the gitignore file from the packages.json file.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.from_key_to_path","title":"<code>from_key_to_path(key)</code>","text":"<p>We get the path from the key string some examples of the keys are; agent/eightballer/custom_balance_poller/0.1.0 where the folder to be removed is; packages/eightballer/agents/custom_balance_poller.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.generate_gitignore","title":"<code>generate_gitignore(ctx)</code>","text":"<p>We generate the gitignore file from the packages.json file Example usage:     adev deps generate_gitignore.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.get_package_hashes","title":"<code>get_package_hashes(repo)</code>","text":"<p>We get the package hashes.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.get_package_json","title":"<code>get_package_json(repo)</code>","text":"<p>We get the package json.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.get_proposed_dependency_updates","title":"<code>get_proposed_dependency_updates(parent_repo, child_repo)</code>","text":"<p>We get the proposed dependency updates.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.get_update_command","title":"<code>get_update_command(poetry_dependencies)</code>","text":"<p>Get the update command.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.handle_output","title":"<code>handle_output(issues, changes)</code>","text":"<p>Handle the output.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.main","title":"<code>main(parent_repo, child_repo, logger, auto_confirm=False)</code>","text":"<p>We run the main function.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.remove_old_package","title":"<code>remove_old_package(repo, proposed_dependency_updates)</code>","text":"<p>We remove the old package directories.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.update","title":"<code>update(ctx, parent_repo, child_repo, location=DependencyLocation.LOCAL, auto_confirm=False)</code>","text":"<p>We update aea packages.json dependencies from a parent repo. Example usage:     adev deps update -p /path/to/parent/repo -c /path/to/child/repo.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.update_package_json","title":"<code>update_package_json(repo, proposed_dependency_updates)</code>","text":"<p>We update the package json.</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.verify","title":"<code>verify(ctx, auto_approve=False)</code>","text":"<p>Verify the packages.json file.</p> <p>Requires GITHUB_TOKEN env variable to be set.</p> <p>Example usage:     adev deps verify</p>"},{"location":"api/auto_dev/#auto_dev.commands.deps.write_package_json","title":"<code>write_package_json(repo, package_dict)</code>","text":"<p>We write the package json.</p>"},{"location":"api/auto_dev/#auto_dev.commands.fmt","title":"<code>fmt</code>","text":"<p>This module contains the logic for the fmt command.</p>"},{"location":"api/auto_dev/#auto_dev.commands.fmt.fmt","title":"<code>fmt(ctx, path, changed_only)</code>","text":"<p>Runs the formatting tooling.</p>"},{"location":"api/auto_dev/#auto_dev.commands.fsm","title":"<code>fsm</code>","text":"<p>Implement fsm tooling.</p>"},{"location":"api/auto_dev/#auto_dev.commands.fsm.FsmType","title":"<code>FsmType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Type of FSM output</p>"},{"location":"api/auto_dev/#auto_dev.commands.fsm.from_file","title":"<code>from_file(fsm_spec, fsm_name, in_type, output)</code>","text":"<p>We parse an fsm file, in order to covnert between mermaid and fsm_spec.</p> <p>Example Usage: <code>adev fsm from-file auto_dev/data/fsm/fsm_specification.yaml testAbciApp</code> <code>adev fsm from-file auto_dev/data/fsm/fsm_specification.yaml testAbciApp --output fsm_spec</code></p>"},{"location":"api/auto_dev/#auto_dev.commands.fsm.fsm","title":"<code>fsm()</code>","text":"<p>Implement fsm tooling.</p>"},{"location":"api/auto_dev/#auto_dev.commands.improve","title":"<code>improve</code>","text":"<p>Group to implement improvements.</p>"},{"location":"api/auto_dev/#auto_dev.commands.improve.improve","title":"<code>improve(ctx, path, type_of_repo, author, name, yes)</code>","text":"<p>Improves downstream repos by verifying the context of scaffolded files.</p>"},{"location":"api/auto_dev/#auto_dev.commands.lint","title":"<code>lint</code>","text":"<p>Simple cli to allow users to perform the following actions against an autonomy repo.</p> <ul> <li>lint</li> <li>test</li> <li>build</li> </ul>"},{"location":"api/auto_dev/#auto_dev.commands.lint.lint","title":"<code>lint(ctx, path, changed_only)</code>","text":"<p>Runs the linting tooling.</p>"},{"location":"api/auto_dev/#auto_dev.commands.lint.multi_thread_lint","title":"<code>multi_thread_lint(paths, verbose, num_processes)</code>","text":"<p>Run the linting in parallel.</p>"},{"location":"api/auto_dev/#auto_dev.commands.lint.single_thread_lint","title":"<code>single_thread_lint(paths, verbose, logger)</code>","text":"<p>Run the linting in a single thread.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata","title":"<code>metadata</code>","text":"<p>Used to generate metadata for aea packages. - generate metadata. we read in a meta data file and generate a json file that can be uploaded to ipfs. - print metadata: we read in a meta data file and print it in a way that can be copy pasted into the frontend.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.Dependency","title":"<code>Dependency</code>","text":"<p>               Bases: <code>PublicId</code></p> <p>Class to represent a dependency.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.build_dependency_tree_for_component","title":"<code>build_dependency_tree_for_component(component)</code>","text":"<p>Build dependency tree for a component.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.check_component_status","title":"<code>check_component_status(component_id)</code>","text":"<p>We check the status of the component by reading the mapping.txt file in the mints folder. \u27a4 cat mints/mapping.txt token_id-\"component_id\"</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.check_component_status--deps","title":"deps","text":"<p>1-\"protocol/valory/abci/0.1.0\" 2-\"protocol/valory/acn/1.1.0\" ... 51-\"contract/valory/multicall2/0.1.0\"</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.check_component_status--dev","title":"dev","text":"<p>97-contract/zarathustra/grow_registry:0.1.0 ?-skill/zarathustra/plantation_abci/0.1.0.</p> <p>NOTES: if the component is NOT present in the mapping.txt file, it is NOT minted. if the component is present in the we always return the token_id, even if it is not minted.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.generate","title":"<code>generate(root, target_name, target_id, strict, all)</code>","text":"<p>Generate metadata for a package.</p> <p>example usage:      python ./metadata.py generate . contract/eightballer/cool_skill/0.1.0 01</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.get_metadata","title":"<code>get_metadata(root, name, hash_, target_id)</code>","text":"<p>Get metadata for a package by reading in the package.yaml file and then getting packages from the yaml keys in the orders of: - contracts - protocols - connections - skills - agents - customs.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.metadata","title":"<code>metadata()</code>","text":"<p>Commands for generating and printing metadata.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.read_json_file","title":"<code>read_json_file(file_path)</code>","text":"<p>Reads a json file and returns the data.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.read_yaml_file","title":"<code>read_yaml_file(file_path)</code>","text":"<p>Reads a yaml file and returns the data.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.render_metadata","title":"<code>render_metadata(metadata, verbose=False)</code>","text":"<p>Render metadata for a package.</p>"},{"location":"api/auto_dev/#auto_dev.commands.metadata.validate","title":"<code>validate(ctx, metadata_file)</code>","text":"<p>Print metadata for a package.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release","title":"<code>release</code>","text":"<p>We release the package.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser","title":"<code>Releaser</code>  <code>dataclass</code>","text":"<p>class to mamange the versions.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser.current_version","title":"<code>current_version()</code>","text":"<p>We get the current version.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser.get_new_version","title":"<code>get_new_version()</code>","text":"<p>We get the new version by incrementing the current version. if we are at v0.1.0 we will get v0.1.1 current version is in the format v0.1.0.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser.is_repo_clean","title":"<code>is_repo_clean()</code>","text":"<p>We check the project is clean using a command to check if there are ANY changes.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser.pre_release","title":"<code>pre_release()</code>","text":"<p>We run the pre release.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser.release","title":"<code>release()</code>","text":"<p>We run the release.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.Releaser.update_version","title":"<code>update_version(new_version)</code>","text":"<p>We update the version.</p>"},{"location":"api/auto_dev/#auto_dev.commands.release.release","title":"<code>release(ctx, dep_path, verbose=False)</code>","text":"<p>We release the package. Automaticaly bump the version and create a new tag. Push the tag to github. Push the branch to github. This will trigger a github action to publish the package to pypi.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo","title":"<code>repo</code>","text":"<p>Module to assist with repo setup and management. contains the following commands;     - scaffold         - all         - .gitignore         . .githubworkflows         . .README.md         . pyproject.toml.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.AutonomyVersionSet","title":"<code>AutonomyVersionSet</code>  <code>dataclass</code>","text":"<p>Class to represent a set of autonomy versions.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.RepoScaffolder","title":"<code>RepoScaffolder</code>","text":"<p>Class to scaffold a new repo.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.RepoScaffolder.template_files","title":"<code>template_files</code>  <code>property</code>","text":"<p>Get template files.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.RepoScaffolder.scaffold","title":"<code>scaffold(write_files=True)</code>","text":"<p>Scaffold files for a new repo.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.RepoScaffolder.verify","title":"<code>verify(fix_differences=False, yes=False)</code>","text":"<p>Scaffold files for a new repo.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.execute_commands","title":"<code>execute_commands(*commands, verbose, logger, shell=False)</code>","text":"<p>Execute commands.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.repo","title":"<code>repo()</code>","text":"<p>Repository management commands.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.scaffold","title":"<code>scaffold(ctx, name, type_of_repo, force, auto_approve, install, initial_commit)</code>","text":"<p>Create a new repo and scaffold necessary files.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.update_against_version_set","title":"<code>update_against_version_set(logger, dry_run=False)</code>","text":"<p>Update the dependencies in the pyproject.toml file against the version set.</p>"},{"location":"api/auto_dev/#auto_dev.commands.repo.update_deps","title":"<code>update_deps(ctx, lock)</code>","text":"<p>Update dependencies in the current repo.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold","title":"<code>scaffold</code>","text":"<p>Module to allow the scaffolding of contracts. Contains a BlockExplorer class to allow the user to interact with the blockchain explorer.</p> <p>Also contains a Contract, which we will use to allow the user to; - generate the open-aea contract class. - generate the open-aea contract tests.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.behaviour","title":"<code>behaviour(ctx, spec_file, behaviour_type, auto_confirm, target_speech_acts)</code>","text":"<p>Generate an AEA handler from an OpenAPI 3 specification.</p> <p>Example: <pre><code>adev scaffold behaviour openapi.yaml --behaviour-type metrics\n</code></pre></p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.connection","title":"<code>connection(ctx, name, protocol)</code>","text":"<p>Scaffold a connection.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.contract","title":"<code>contract(ctx, address, name, block_explorer_url, block_explorer_api_key, read_functions, write_functions, from_abi, from_file)</code>","text":"<p>Scaffold a contract.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.dao","title":"<code>dao(ctx, auto_confirm)</code>","text":"<p>Scaffold Data Access Objects (DAOs) and generate test script based on an OpenAPI 3 specification.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.dialogues","title":"<code>dialogues(ctx, spec_file, dialogue_type, auto_confirm, target_speech_acts)</code>","text":"<p>Generate an AEA handler from an OpenAPI 3 specification.</p> <p>Example: <pre><code>adev scaffold behaviour openapi.yaml --behaviour-type metrics\n</code></pre></p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.fsm","title":"<code>fsm(spec)</code>","text":"<p>Scaffold a FSM.</p> <p>usage: <code>adev scaffold fsm [--spec fsm_specification.yaml]</code></p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.handler","title":"<code>handler(ctx, spec_file, public_id, new_skill, auto_confirm)</code>","text":"<p>Generate an AEA handler from an OpenAPI 3 specification.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.handlers","title":"<code>handlers(ctx, spec_file, handler_type, auto_confirm, target_speech_acts)</code>","text":"<p>Generate an AEA handler from an OpenAPI 3 specification.</p> <p>Example: <pre><code>adev scaffold behaviour openapi.yaml --behaviour-type metrics\n</code></pre></p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.protocol","title":"<code>protocol(ctx, protocol_specification_path, language)</code>","text":"<p>Scaffold a protocol.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.scaffold","title":"<code>scaffold()</code>","text":"<p>Scaffold a (set of) components.</p>"},{"location":"api/auto_dev/#auto_dev.commands.scaffold.tests","title":"<code>tests(ctx)</code>","text":"<p>Generate tests for an aea component in the current directory AEA handler from an OpenAPI 3 specification.</p>"},{"location":"api/auto_dev/#auto_dev.commands.test","title":"<code>test</code>","text":"<p>Test command cli module.</p>"},{"location":"api/auto_dev/#auto_dev.commands.test.test","title":"<code>test(ctx, path, watch, coverage_report)</code>","text":"<p>Runs the test tooling.</p>"},{"location":"api/auto_dev/#auto_dev.connections","title":"<code>connections</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder","title":"<code>scaffolder</code>","text":"<p>Connection scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionFolderTemplate","title":"<code>ConnectionFolderTemplate</code>","text":"<p>ConnectionFolderTemplate.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionFolderTemplate.kwargs","title":"<code>kwargs</code>  <code>property</code>","text":"<p>Template formatting kwargs.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionFolderTemplate.augment","title":"<code>augment()</code>","text":"<p>(Over)write the connection files.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionScaffolder","title":"<code>ConnectionScaffolder</code>","text":"<p>ConnectionScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionScaffolder.__init__","title":"<code>__init__(ctx, name, protocol_id)</code>","text":"<p>Initialize ConnectionScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionScaffolder.generate","title":"<code>generate()</code>","text":"<p>Generate connection.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionScaffolder.update_config","title":"<code>update_config()</code>","text":"<p>Update connection.yaml.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.ConnectionScaffolder.update_readme","title":"<code>update_readme()</code>","text":"<p>Update README.md.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.get_handler_mapping","title":"<code>get_handler_mapping(protocol)</code>","text":"<p>Format mapping from performative to handler method.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.get_handlers","title":"<code>get_handlers(protocol)</code>","text":"<p>Format handler methods.</p>"},{"location":"api/auto_dev/#auto_dev.connections.scaffolder.to_camel","title":"<code>to_camel(name, sep='')</code>","text":"<p>Snake to camelcase.</p>"},{"location":"api/auto_dev/#auto_dev.constants","title":"<code>constants</code>","text":"<p>Constants for the auto_dev package.</p>"},{"location":"api/auto_dev/#auto_dev.constants.CheckResult","title":"<code>CheckResult</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Check result enum.</p>"},{"location":"api/auto_dev/#auto_dev.contracts","title":"<code>contracts</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.block_explorer","title":"<code>block_explorer</code>","text":"<p>Module to interact with the blockchain explorer.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.block_explorer.BlockExplorer","title":"<code>BlockExplorer</code>  <code>dataclass</code>","text":"<p>Class to interact with the blockchain explorer.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.block_explorer.BlockExplorer.get_abi","title":"<code>get_abi(address)</code>","text":"<p>Get the abi for the contract at the address.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract","title":"<code>contract</code>","text":"<p>Module to represent a contract.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract","title":"<code>Contract</code>","text":"<p>Class to scaffold a contract.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.__init__","title":"<code>__init__(author, name, abi, address=DEFAULT_NULL_ADDRESS, web3=None)</code>","text":"<p>Initialise the contract.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.parse_events","title":"<code>parse_events()</code>","text":"<p>We need to parse the events from the abi.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.parse_functions","title":"<code>parse_functions()</code>","text":"<p>Get the functions from the abi.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.process","title":"<code>process()</code>","text":"<p>Scaffold the contract and ensure it is written to the file system.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.scaffold_read_function","title":"<code>scaffold_read_function(function)</code>","text":"<p>Scaffold a read function.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.update_all","title":"<code>update_all()</code>","text":"<p>Scaffold the contract.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.update_contract_init__","title":"<code>update_contract_init__()</code>","text":"<p>Append the Public.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.update_contract_py","title":"<code>update_contract_py()</code>","text":"<p>Update the contract.py file. - update the class name. - update the contract_id     contract_id = PublicId.from_str(\"open_aea/scaffold:0.1.0\").</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.update_contract_yaml","title":"<code>update_contract_yaml()</code>","text":"<p>Perform an update for the contract,yaml to specify the.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract.Contract.write_abi_to_file","title":"<code>write_abi_to_file()</code>","text":"<p>Write the abi to a file.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events","title":"<code>contract_events</code>","text":"<p>Class to represent and parse contract events.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events.ContractEvent","title":"<code>ContractEvent</code>  <code>dataclass</code>","text":"<p>Data class to represent a solidity event</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events.ContractEvent.args","title":"<code>args()</code>","text":"<p>Return the inputs as a string.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events.ContractEvent.inputs_list","title":"<code>inputs_list()</code>","text":"<p>Return the inputs as a string.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events.ContractEvent.inputs_with_types","title":"<code>inputs_with_types()</code>","text":"<p>Return the inputs with names.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events.ContractEvent.to_string","title":"<code>to_string()</code>","text":"<p>Return the event as a string.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_events.ContractEvent.vars","title":"<code>vars()</code>","text":"<p>return variable instances for the inputs.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions","title":"<code>contract_functions</code>","text":"<p>Contract functions.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction","title":"<code>ContractFunction</code>  <code>dataclass</code>","text":"<p>A class to scaffold a read function.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.function_arguments","title":"<code>function_arguments</code>  <code>property</code>","text":"<p>Parse the w3 function arguments into a string. expected format: \"arg1, arg2, arg3\".</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.function_arguments_with_types","title":"<code>function_arguments_with_types</code>  <code>property</code>","text":"<p>Parse the w3 function arguments into a string. We need to map the types to python types. expected format: \" arg1: type, arg2: type, arg3: type.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.function_description","title":"<code>function_description</code>  <code>property</code>","text":"<p>Parse the w3 function description into a string. ensure to use the input and return variables expected format: \"     arg1: type,     arg2: type,     arg3: type     return1: type,     return2: type,     return3: type.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.function_name","title":"<code>function_name</code>  <code>property</code>","text":"<p>Return the function name.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.function_return_values","title":"<code>function_return_values</code>  <code>property</code>","text":"<p>Parse the w3 function return values. expected output: return {     return1: type,     return2: type,     return3: type }.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.function_signature","title":"<code>function_signature</code>  <code>property</code>","text":"<p>Return the function signature.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.ContractFunction.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_functions.FunctionType","title":"<code>FunctionType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for function types.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_scafolder","title":"<code>contract_scafolder</code>","text":"<p>Contract scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_scafolder.ContractScaffolder","title":"<code>ContractScaffolder</code>  <code>dataclass</code>","text":"<p>Class to scaffold a contract.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_scafolder.ContractScaffolder.from_abi","title":"<code>from_abi(path, address, name)</code>","text":"<p>Scaffold a contract from a file.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_scafolder.ContractScaffolder.from_block_explorer","title":"<code>from_block_explorer(address, name)</code>","text":"<p>Scaffold a contract from a block explorer.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_scafolder.ContractScaffolder.generate_openaea_contract","title":"<code>generate_openaea_contract(contract)</code>","text":"<p>Generate the open-aea contract. We will use the contract name to generate the class name. We need to; - use the temporary directory context manager. - create an agent - cd into the agent directory - scaffold the contract using the name. - create a new directory for the contract in the original directory. - copy the contract to the new directory.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_templates","title":"<code>contract_templates</code>","text":"<p>Contains the necessary templates for the contracts.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.contract_templates.main","title":"<code>main(args)</code>","text":"<p>Run the main script.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function","title":"<code>function</code>","text":"<p>Function class.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function","title":"<code>Function</code>  <code>dataclass</code>","text":"<p>A function of a contract.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function.camel_case_name","title":"<code>camel_case_name</code>  <code>property</code>","text":"<p>Return the name of the function.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function.inputs","title":"<code>inputs</code>  <code>property</code>","text":"<p>Return the inputs as variables.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function.is_read_only","title":"<code>is_read_only</code>  <code>property</code>","text":"<p>Is the function read only.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function.name","title":"<code>name</code>  <code>property</code>","text":"<p>Return the name of the function.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function.outputs","title":"<code>outputs</code>  <code>property</code>","text":"<p>Return the outputs as variables.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.function.Function.to_string","title":"<code>to_string()</code>","text":"<p>Returns the function as a string.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.param_type","title":"<code>param_type</code>","text":"<p>Module contains the ParamType class, which represents the type of a parameter in solidity.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.param_type.ParamType","title":"<code>ParamType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Class to represent the type of a parameter in solidity.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.utils","title":"<code>utils</code>","text":"<p>Utils for the contracts.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.utils.keyword_to_safe_name","title":"<code>keyword_to_safe_name(name)</code>","text":"<p>Convert a keyword to a safe name.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.utils.safe_name_to_keyword","title":"<code>safe_name_to_keyword(name)</code>","text":"<p>Convert a safe name to a keyword.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable","title":"<code>variable</code>","text":"<p>Module contains the Variable class.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable","title":"<code>Variable</code>  <code>dataclass</code>","text":"<p>This class represent a variable in solidity.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.python_type","title":"<code>python_type</code>  <code>property</code>","text":"<p>Return the python type of the variable.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.solidity_type","title":"<code>solidity_type</code>  <code>property</code>","text":"<p>Return the solidity type of the variable.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.python_name","title":"<code>python_name()</code>","text":"<p>Return the python name of the variable.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.to_key_value","title":"<code>to_key_value()</code>","text":"<p>Parse the variable to string to be used in a key value pair.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.to_str_arg","title":"<code>to_str_arg()</code>","text":"<p>Parse the variable to string to be passed as an argument to a function.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.to_str_params","title":"<code>to_str_params()</code>","text":"<p>Parse the variable to string to be passed as a parameter to a function.</p>"},{"location":"api/auto_dev/#auto_dev.contracts.variable.Variable.to_str_return","title":"<code>to_str_return()</code>","text":"<p>Parse the variable to string to be returned by a function.</p>"},{"location":"api/auto_dev/#auto_dev.dao","title":"<code>dao</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data","title":"<code>dummy_data</code>","text":"<p>Generate dummy data for the given models.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_aggregated_dummy_data","title":"<code>generate_aggregated_dummy_data(models, num_items=5)</code>","text":"<p>Generate aggregated dummy data for the given models.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_boolean","title":"<code>generate_boolean()</code>","text":"<p>Generates a random boolean value.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_chain_id","title":"<code>generate_chain_id()</code>","text":"<p>Generates a random chain ID.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_dummy_data","title":"<code>generate_dummy_data(models, num_instances=5)</code>","text":"<p>Generate dummy data for the given models.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_ethereum_address","title":"<code>generate_ethereum_address()</code>","text":"<p>Generates a fake Ethereum address.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_integer","title":"<code>generate_integer()</code>","text":"<p>Generates a random integer.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_number","title":"<code>generate_number()</code>","text":"<p>Generates a random float number.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_single_dummy_data","title":"<code>generate_single_dummy_data(model_schema)</code>","text":"<p>Generate a single instance of dummy data for the given model schema.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.generate_string","title":"<code>generate_string()</code>","text":"<p>Generates a random string.</p>"},{"location":"api/auto_dev/#auto_dev.dao.dummy_data.normalize_property_name","title":"<code>normalize_property_name(prop_name)</code>","text":"<p>Normalize the property name to snake_case.</p>"},{"location":"api/auto_dev/#auto_dev.dao.generator","title":"<code>generator</code>","text":"<p>DAO generator class.</p>"},{"location":"api/auto_dev/#auto_dev.dao.generator.DAOGenerator","title":"<code>DAOGenerator</code>","text":"<p>DAO generator class.</p>"},{"location":"api/auto_dev/#auto_dev.dao.generator.DAOGenerator.generate_dao_classes","title":"<code>generate_dao_classes()</code>","text":"<p>Generate DAO classes.</p>"},{"location":"api/auto_dev/#auto_dev.dao.scaffolder","title":"<code>scaffolder</code>","text":"<p>DAOScaffolder class is responsible for scaffolding DAO classes and test scripts.</p>"},{"location":"api/auto_dev/#auto_dev.dao.scaffolder.DAOScaffolder","title":"<code>DAOScaffolder</code>","text":"<p>DAOScaffolder class is responsible for scaffolding DAO classes and test scripts.</p>"},{"location":"api/auto_dev/#auto_dev.dao.scaffolder.DAOScaffolder.identify_persistent_schemas","title":"<code>identify_persistent_schemas(api_spec)</code>","text":"<p>Identify persistent schemas in the API spec.</p>"},{"location":"api/auto_dev/#auto_dev.dao.scaffolder.DAOScaffolder.scaffold","title":"<code>scaffold()</code>","text":"<p>Scaffold DAO classes and test scripts.</p>"},{"location":"api/auto_dev/#auto_dev.data","title":"<code>data</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.data.connections","title":"<code>connections</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.data.connections.template","title":"<code>template</code>","text":"<p>Template for the connection for the connection scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.data.connections.test_template","title":"<code>test_template</code>","text":"<p>Template for the tests for the connection scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.data.contracts","title":"<code>contracts</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.data.contracts.header","title":"<code>header</code>","text":"<p>Constants for the contract generation.</p>"},{"location":"api/auto_dev/#auto_dev.data.mermaid","title":"<code>mermaid</code>","text":"<p>The purpose of this module is to allow a mermaid chart to be generated from a fsm spec file. Additionally, it will allow the user to generate a mermaid chart from a.</p>"},{"location":"api/auto_dev/#auto_dev.dialogues","title":"<code>dialogues</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.dialogues.scaffolder","title":"<code>scaffolder</code>","text":"<p>Dialogues scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.dialogues.scaffolder.DialogueScaffolder","title":"<code>DialogueScaffolder</code>","text":"<p>               Bases: <code>BehaviourScaffolder</code></p> <p>Dialogue Scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.dialogues.scaffolder.DialogueScaffolder.__init__","title":"<code>__init__(protocol_specification_path, dialogue_type, logger, verbose=True, auto_confirm=False)</code>","text":"<p>Initialize ProtocolScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.dialogues.scaffolder.DialogueTypes","title":"<code>DialogueTypes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Dialogue types enum.</p>"},{"location":"api/auto_dev/#auto_dev.enums","title":"<code>enums</code>","text":"<p>Enums for auto_dev.</p>"},{"location":"api/auto_dev/#auto_dev.enums.BehaviourTypes","title":"<code>BehaviourTypes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Behaviour types enum.</p>"},{"location":"api/auto_dev/#auto_dev.enums.FileOperation","title":"<code>FileOperation</code>","text":"<p>               Bases: <code>Enum</code></p> <p>File operation enum.</p>"},{"location":"api/auto_dev/#auto_dev.enums.FileType","title":"<code>FileType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>File type enum.</p>"},{"location":"api/auto_dev/#auto_dev.enums.UserInput","title":"<code>UserInput</code>","text":"<p>               Bases: <code>Enum</code></p> <p>User input enum.</p>"},{"location":"api/auto_dev/#auto_dev.exceptions","title":"<code>exceptions</code>","text":"<p>Base exceptions for the auto_dev package.</p>"},{"location":"api/auto_dev/#auto_dev.exceptions.AuthenticationError","title":"<code>AuthenticationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Authentication error.</p>"},{"location":"api/auto_dev/#auto_dev.exceptions.NetworkTimeoutError","title":"<code>NetworkTimeoutError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Network error.</p>"},{"location":"api/auto_dev/#auto_dev.exceptions.NotFound","title":"<code>NotFound</code>","text":"<p>               Bases: <code>FileNotFoundError</code></p> <p>File not found error.</p>"},{"location":"api/auto_dev/#auto_dev.exceptions.OperationError","title":"<code>OperationError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Operation error.</p>"},{"location":"api/auto_dev/#auto_dev.exceptions.UserInputError","title":"<code>UserInputError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>User input error.</p>"},{"location":"api/auto_dev/#auto_dev.fmt","title":"<code>fmt</code>","text":"<p>Module to format the code.</p>"},{"location":"api/auto_dev/#auto_dev.fmt.Formatter","title":"<code>Formatter</code>","text":"<p>Formatter class to run the formatter.</p>"},{"location":"api/auto_dev/#auto_dev.fmt.Formatter.format","title":"<code>format(path)</code>","text":"<p>Format the path.</p>"},{"location":"api/auto_dev/#auto_dev.fmt.Formatter.run_format","title":"<code>run_format(path, verbose=False)</code>  <code>staticmethod</code>","text":"<p>Run black on the path.</p>"},{"location":"api/auto_dev/#auto_dev.fmt.Formatter.run_sort","title":"<code>run_sort(path, verbose=False)</code>  <code>staticmethod</code>","text":"<p>Run sort on the path.</p>"},{"location":"api/auto_dev/#auto_dev.fmt.multi_thread_fmt","title":"<code>multi_thread_fmt(paths, verbose, num_processes, remote=False)</code>","text":"<p>Run the formatting in multiple threads.</p>"},{"location":"api/auto_dev/#auto_dev.fmt.single_thread_fmt","title":"<code>single_thread_fmt(paths, verbose, logger, remote=False)</code>","text":"<p>Run the formatting in a single thread.</p>"},{"location":"api/auto_dev/#auto_dev.fsm","title":"<code>fsm</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.chain","title":"<code>chain</code>","text":"<p>Module to allow the chaining of multiple FSMs together.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.chain.Chainer","title":"<code>Chainer</code>  <code>dataclass</code>","text":"<p>The chainer class allows us to chain together multiple FSMs.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.chain.Chainer.chain","title":"<code>chain()</code>","text":"<p>We chain the FSMs together.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.chain.Chainer.validate","title":"<code>validate()</code>","text":"<p>We validate the FSMs.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm","title":"<code>fsm</code>","text":"<p>Tools to parse fsm specs.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec","title":"<code>FsmSpec</code>  <code>dataclass</code>","text":"<p>We represent a fsm spec.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec.from_mermaid","title":"<code>from_mermaid(mermaid_str)</code>  <code>classmethod</code>","text":"<p>Parse a mermaid string to a FsmSpec. note, we need to create a graph like structure. we parse each line and create a node and a edge.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec.from_mermaid_path","title":"<code>from_mermaid_path(path, label)</code>  <code>classmethod</code>","text":"<p>We create a FsmSpec from a yaml file.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec.from_path","title":"<code>from_path(path)</code>  <code>classmethod</code>","text":"<p>We create a FsmSpec from a yaml file.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec.from_yaml","title":"<code>from_yaml(yaml_str, label=None)</code>  <code>classmethod</code>","text":"<p>We create a FsmSpec from a yaml string.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec.to_mermaid","title":"<code>to_mermaid()</code>","text":"<p>We convert the FsmSpec to a mermaid string.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.FsmSpec.to_string","title":"<code>to_string()</code>","text":"<p>We convert the FsmSpec to a string.</p>"},{"location":"api/auto_dev/#auto_dev.fsm.fsm.validate_name","title":"<code>validate_name(name)</code>","text":"<p>Validate an fsm name.</p>"},{"location":"api/auto_dev/#auto_dev.handler","title":"<code>handler</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder","title":"<code>scaffolder</code>","text":"<p>Handler scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffoldBuilder","title":"<code>HandlerScaffoldBuilder</code>","text":"<p>Builder for HandlerScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffoldBuilder.__init__","title":"<code>__init__()</code>","text":"<p>Initialize HandlerScaffoldBuilder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffoldBuilder.build","title":"<code>build()</code>","text":"<p>Build the scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffoldBuilder.create_scaffolder","title":"<code>create_scaffolder(spec_file_path, public_id, logger, verbose=True, new_skill=False, auto_confirm=False)</code>","text":"<p>Initialize HandlerScaffoldBuilder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder","title":"<code>HandlerScaffolder</code>","text":"<p>Handler Scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.__init__","title":"<code>__init__(config, logger)</code>","text":"<p>Initialize HandlerScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.aea_install","title":"<code>aea_install()</code>","text":"<p>Install the aea.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.classify_post_operation","title":"<code>classify_post_operation(path, operation)</code>","text":"<p>Classify the post operation.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.confirm_action","title":"<code>confirm_action(message)</code>","text":"<p>Prompt the user for confirmation before performing an action.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.create_dialogues","title":"<code>create_dialogues()</code>","text":"<p>Create the dialogues.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.create_exceptions","title":"<code>create_exceptions()</code>","text":"<p>Create the exceptions file.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.create_new_skill","title":"<code>create_new_skill()</code>","text":"<p>Create a new skill.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.extract_schema","title":"<code>extract_schema(operation, persistent_schemas)</code>","text":"<p>Extract the schema from the operation.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.fingerprint","title":"<code>fingerprint()</code>","text":"<p>Fingerprint the skill.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.generate_handler","title":"<code>generate_handler()</code>","text":"<p>Generate handler.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.generate_method_name","title":"<code>generate_method_name(http_method, path)</code>","text":"<p>Generate method name.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.identify_persistent_schemas","title":"<code>identify_persistent_schemas(api_spec)</code>","text":"<p>Identify the persistent schemas.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.move_and_update_my_model","title":"<code>move_and_update_my_model()</code>","text":"<p>Reads in the my_model.py file and updates it. We replace the name MyModel with the name Strategy.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.present_actions","title":"<code>present_actions()</code>","text":"<p>Present the scaffold summary.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.remove_behaviours","title":"<code>remove_behaviours()</code>","text":"<p>Remove the behaviours.py file.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.sanitize_identifier","title":"<code>sanitize_identifier(name)</code>","text":"<p>Sanitize the identifier.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.save_handler","title":"<code>save_handler()</code>","text":"<p>Save handler to file.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.scaffold","title":"<code>scaffold()</code>","text":"<p>Scaffold the handler.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.HandlerScaffolder.update_skill_yaml","title":"<code>update_skill_yaml(file)</code>","text":"<p>Update the skill.yaml file.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.ScaffolderConfig","title":"<code>ScaffolderConfig</code>","text":"<p>Handler Scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handler.scaffolder.ScaffolderConfig.__init__","title":"<code>__init__(spec_file_path, public_id, verbose=True, new_skill=False, auto_confirm=False)</code>","text":"<p>Initialize HandlerScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handlers","title":"<code>handlers</code>","text":"<p>Auto-dev tooling.</p>"},{"location":"api/auto_dev/#auto_dev.handlers.base","title":"<code>base</code>","text":"<p>Simple handler scaffolder to allow users to scaffold a new handler from a protocol specification.</p>"},{"location":"api/auto_dev/#auto_dev.handlers.base.HandlerScaffolder","title":"<code>HandlerScaffolder</code>","text":"<p>               Bases: <code>BehaviourScaffolder</code></p> <p>Handler Scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handlers.base.HandlerScaffolder.__init__","title":"<code>__init__(protocol_specification_path, handler_type, logger, verbose=True, auto_confirm=False)</code>","text":"<p>Initialize ProtocolScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.handlers.base.HandlerTypes","title":"<code>HandlerTypes</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Dialogue types enum.</p>"},{"location":"api/auto_dev/#auto_dev.lint","title":"<code>lint</code>","text":"<p>Simple linting tooling for autonomy repos.</p>"},{"location":"api/auto_dev/#auto_dev.lint.check_path","title":"<code>check_path(path, verbose=False)</code>","text":"<p>Check the path for linting errors.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to check.</p> required"},{"location":"api/auto_dev/#auto_dev.local_fork","title":"<code>local_fork</code>","text":"<p>Module to run a docker container with a fork of the mainnet.</p>"},{"location":"api/auto_dev/#auto_dev.local_fork.DockerFork","title":"<code>DockerFork</code>  <code>dataclass</code>","text":"<p>Use a docker container to test contract calls.</p>"},{"location":"api/auto_dev/#auto_dev.local_fork.DockerFork.is_ready","title":"<code>is_ready()</code>","text":"<p>Check if the docker container is ready.</p>"},{"location":"api/auto_dev/#auto_dev.local_fork.DockerFork.run","title":"<code>run()</code>","text":"<p>Run the docker container in a background process.</p>"},{"location":"api/auto_dev/#auto_dev.local_fork.DockerFork.stop","title":"<code>stop()</code>","text":"<p>Stop the docker container.</p>"},{"location":"api/auto_dev/#auto_dev.protocols","title":"<code>protocols</code>","text":"<p>Initialisation.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder","title":"<code>scaffolder</code>","text":"<p>Protocol scaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.CommentSplitter","title":"<code>CommentSplitter</code>","text":"<p>               Bases: <code>NodeVisitor</code></p> <p>CommentSplitter for parsing AST.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.CommentSplitter.split_docstring","title":"<code>split_docstring(docstring)</code>","text":"<p>Split docstring.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.CommentSplitter.visit_FunctionDef","title":"<code>visit_FunctionDef(node)</code>","text":"<p>process the function's docstring</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.CommentSplitter.visit_Module","title":"<code>visit_Module(node)</code>","text":"<p>Process the module-level docstring</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.EnumModifier","title":"<code>EnumModifier</code>","text":"<p>EnumModifier.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.EnumModifier.__init__","title":"<code>__init__(protocol_path, logger)</code>","text":"<p>Initialize EnumModifier.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.EnumModifier.augment_enums","title":"<code>augment_enums()</code>","text":"<p>Agument enums.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder","title":"<code>ProtocolScaffolder</code>","text":"<p>ProtocolScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.__init__","title":"<code>__init__(protocol_specification_path, language, logger, verbose=True)</code>","text":"<p>Initialize ProtocolScaffolder.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.clean_tests","title":"<code>clean_tests(protocol_path, protocol)</code>","text":"<p>Clean tests.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.clean_tests_dialogues","title":"<code>clean_tests_dialogues(protocol_path, protocol)</code>","text":"<p>Clean tests.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.clean_tests_messages","title":"<code>clean_tests_messages(protocol_path, protocol)</code>","text":"<p>Clean tests.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.cleanup_protocol","title":"<code>cleanup_protocol(protocol_path, protocol_author, protocol_definition, protocol_name)</code>","text":"<p>Cleanup protocol.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.generate","title":"<code>generate()</code>","text":"<p>Generate protocol.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.generate_base_models","title":"<code>generate_base_models(protocol_path, protocol_name, protocol)</code>","text":"<p>Generate base models.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.generate_pydantic_models","title":"<code>generate_pydantic_models(protocol_path, protocol_name, protocol)</code>","text":"<p>Generate data classes.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.ProtocolScaffolder.output_pydantic_models","title":"<code>output_pydantic_models(pydantic_output, protocol_path, required_type_imports)</code>","text":"<p>Ouput the pydantic models to the custom_types.py file.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.get_docstring_index","title":"<code>get_docstring_index(node)</code>","text":"<p>Get docstring index.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.get_dummy_data","title":"<code>get_dummy_data(field)</code>","text":"<p>Get dummy data.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.get_raise_statement","title":"<code>get_raise_statement(stmt)</code>","text":"<p>Get raise statement.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.parse_enums","title":"<code>parse_enums(protocol)</code>","text":"<p>Parse enums.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.parse_protobuf_type","title":"<code>parse_protobuf_type(protobuf_type, required_type_imports=[])</code>","text":"<p>Parse protobuf type into python type.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.read_protocol","title":"<code>read_protocol(filepath)</code>","text":"<p>Read protocol specification.</p>"},{"location":"api/auto_dev/#auto_dev.protocols.scaffolder.split_long_comment_lines","title":"<code>split_long_comment_lines(code, max_line_length=120)</code>","text":"<p>Split long comment lines given a code string.</p>"},{"location":"api/auto_dev/#auto_dev.test","title":"<code>test</code>","text":"<p>Module for testing the project.</p>"},{"location":"api/auto_dev/#auto_dev.test.test_path","title":"<code>test_path(path, verbose=False, watch=False, multiple=False)</code>","text":"<p>Check the path for linting errors.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to check.</p> required"},{"location":"api/auto_dev/#auto_dev.utils","title":"<code>utils</code>","text":"<p>Utilities for auto_dev.</p>"},{"location":"api/auto_dev/#auto_dev.utils.FileLoader","title":"<code>FileLoader</code>  <code>dataclass</code>","text":"<p>File loader class.</p>"},{"location":"api/auto_dev/#auto_dev.utils.FileLoader.supported_operations","title":"<code>supported_operations</code>  <code>property</code>","text":"<p>Supported operations. aligns the operations with the file type.</p>"},{"location":"api/auto_dev/#auto_dev.utils.FileLoader.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Post init.</p>"},{"location":"api/auto_dev/#auto_dev.utils.camel_to_snake","title":"<code>camel_to_snake(string)</code>","text":"<p>Convert a string from camel case to snake case. Note: If the string is all uppercase, it will be converted to lowercase.</p>"},{"location":"api/auto_dev/#auto_dev.utils.change_dir","title":"<code>change_dir(target_path)</code>","text":"<p>Temporarily change the working directory.</p>"},{"location":"api/auto_dev/#auto_dev.utils.currenttz","title":"<code>currenttz()</code>","text":"<p>Return the current timezone.</p>"},{"location":"api/auto_dev/#auto_dev.utils.folder_swapper","title":"<code>folder_swapper(dir_a, dir_b)</code>","text":"<p>A custom context manager that swaps the contents of two folders, allows the execution of logic within the context, and ensures the original folder contents are restored on exit, whether due to success or failure.</p>"},{"location":"api/auto_dev/#auto_dev.utils.get_logger","title":"<code>get_logger(name=__name__, log_level='INFO')</code>","text":"<p>Get the configured logger.</p>"},{"location":"api/auto_dev/#auto_dev.utils.get_logger--args","title":"Args:","text":"<pre><code>name (str): The name of the logger.\nlog_level (str): The logging level.\n</code></pre>"},{"location":"api/auto_dev/#auto_dev.utils.get_logger--returns","title":"Returns:","text":"<pre><code>logging.Logger: Configured logger instance.\n</code></pre>"},{"location":"api/auto_dev/#auto_dev.utils.get_packages","title":"<code>get_packages(autonomy_packages_file=AUTONOMY_PACKAGES_FILE, type='dev', check=True, hashmap=False)</code>","text":"<p>Get the packages file.</p>"},{"location":"api/auto_dev/#auto_dev.utils.get_paths","title":"<code>get_paths(path=None, changed_only=False)</code>","text":"<p>Get the paths.</p>"},{"location":"api/auto_dev/#auto_dev.utils.has_package_code_changed","title":"<code>has_package_code_changed(package_path)</code>","text":"<p>We use git to effectively check if the code has changed. We filter out any files that are ; - not tracked by git - have no changes to the code in;   - the package itself   - the tests for the package.</p>"},{"location":"api/auto_dev/#auto_dev.utils.isolated_filesystem","title":"<code>isolated_filesystem(copy_cwd=False)</code>","text":"<p>Context manager to create an isolated file system. And to navigate to it and then to clean it up.</p>"},{"location":"api/auto_dev/#auto_dev.utils.load_aea_config","title":"<code>load_aea_config()</code>","text":"<p>Load the aea-config.yaml file.</p>"},{"location":"api/auto_dev/#auto_dev.utils.load_aea_ctx","title":"<code>load_aea_ctx(func)</code>","text":"<p>Load aea Context and AgentConfig if aea-config.yaml exists.</p>"},{"location":"api/auto_dev/#auto_dev.utils.read_from_file","title":"<code>read_from_file(file_path, file_type=FileType.TEXT)</code>","text":"<p>Read content from a file.</p>"},{"location":"api/auto_dev/#auto_dev.utils.remove_prefix","title":"<code>remove_prefix(text, prefix)</code>","text":"<p>str.removeprefix.</p>"},{"location":"api/auto_dev/#auto_dev.utils.remove_suffix","title":"<code>remove_suffix(text, suffix)</code>","text":"<p>str.removesuffix.</p>"},{"location":"api/auto_dev/#auto_dev.utils.restore_directory","title":"<code>restore_directory()</code>","text":"<p>Ensure working directory is restored.</p>"},{"location":"api/auto_dev/#auto_dev.utils.snake_to_camel","title":"<code>snake_to_camel(string)</code>","text":"<p>Convert a string from snake case to camel case.</p>"},{"location":"api/auto_dev/#auto_dev.utils.validate_openapi_spec","title":"<code>validate_openapi_spec(openapi_spec, logger)</code>","text":"<p>Validate an OpenAPI specification.</p>"},{"location":"api/auto_dev/#auto_dev.utils.write_to_file","title":"<code>write_to_file(file_path, content, file_type=FileType.TEXT, **kwargs)</code>","text":"<p>Write content to a file.</p>"},{"location":"api/commands/","title":"Commands","text":""},{"location":"api/commands/#connections_1","title":"Connections","text":""},{"location":"api/commands/#connections","title":"<code>connections</code>","text":"<p>Initialisation.</p>"},{"location":"api/commands/#connections.scaffolder","title":"<code>scaffolder</code>","text":"<p>Connection scaffolder.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionFolderTemplate","title":"<code>ConnectionFolderTemplate</code>","text":"<p>ConnectionFolderTemplate.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionFolderTemplate.kwargs","title":"<code>kwargs</code>  <code>property</code>","text":"<p>Template formatting kwargs.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionFolderTemplate.augment","title":"<code>augment()</code>","text":"<p>(Over)write the connection files.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionScaffolder","title":"<code>ConnectionScaffolder</code>","text":"<p>ConnectionScaffolder.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionScaffolder.__init__","title":"<code>__init__(ctx, name, protocol_id)</code>","text":"<p>Initialize ConnectionScaffolder.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionScaffolder.generate","title":"<code>generate()</code>","text":"<p>Generate connection.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionScaffolder.update_config","title":"<code>update_config()</code>","text":"<p>Update connection.yaml.</p>"},{"location":"api/commands/#connections.scaffolder.ConnectionScaffolder.update_readme","title":"<code>update_readme()</code>","text":"<p>Update README.md.</p>"},{"location":"api/commands/#connections.scaffolder.get_handler_mapping","title":"<code>get_handler_mapping(protocol)</code>","text":"<p>Format mapping from performative to handler method.</p>"},{"location":"api/commands/#connections.scaffolder.get_handlers","title":"<code>get_handlers(protocol)</code>","text":"<p>Format handler methods.</p>"},{"location":"api/commands/#connections.scaffolder.to_camel","title":"<code>to_camel(name, sep='')</code>","text":"<p>Snake to camelcase.</p>"},{"location":"api/connections/","title":"Connections","text":""},{"location":"api/connections/#connections_1","title":"Connections","text":""},{"location":"api/connections/#connections","title":"<code>connections</code>","text":"<p>Initialisation.</p>"},{"location":"api/connections/#connections.scaffolder","title":"<code>scaffolder</code>","text":"<p>Connection scaffolder.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionFolderTemplate","title":"<code>ConnectionFolderTemplate</code>","text":"<p>ConnectionFolderTemplate.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionFolderTemplate.kwargs","title":"<code>kwargs</code>  <code>property</code>","text":"<p>Template formatting kwargs.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionFolderTemplate.augment","title":"<code>augment()</code>","text":"<p>(Over)write the connection files.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionScaffolder","title":"<code>ConnectionScaffolder</code>","text":"<p>ConnectionScaffolder.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionScaffolder.__init__","title":"<code>__init__(ctx, name, protocol_id)</code>","text":"<p>Initialize ConnectionScaffolder.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionScaffolder.generate","title":"<code>generate()</code>","text":"<p>Generate connection.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionScaffolder.update_config","title":"<code>update_config()</code>","text":"<p>Update connection.yaml.</p>"},{"location":"api/connections/#connections.scaffolder.ConnectionScaffolder.update_readme","title":"<code>update_readme()</code>","text":"<p>Update README.md.</p>"},{"location":"api/connections/#connections.scaffolder.get_handler_mapping","title":"<code>get_handler_mapping(protocol)</code>","text":"<p>Format mapping from performative to handler method.</p>"},{"location":"api/connections/#connections.scaffolder.get_handlers","title":"<code>get_handlers(protocol)</code>","text":"<p>Format handler methods.</p>"},{"location":"api/connections/#connections.scaffolder.to_camel","title":"<code>to_camel(name, sep='')</code>","text":"<p>Snake to camelcase.</p>"},{"location":"api/constants/","title":"Constants","text":""},{"location":"api/constants/#constants_1","title":"Constants","text":""},{"location":"api/constants/#constants","title":"<code>constants</code>","text":"<p>Constants for the auto_dev package.</p>"},{"location":"api/constants/#constants.CheckResult","title":"<code>CheckResult</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Check result enum.</p>"},{"location":"api/contracts/","title":"Contracts","text":""},{"location":"api/contracts/#contracts_1","title":"Contracts","text":""},{"location":"api/contracts/#contracts","title":"<code>contracts</code>","text":"<p>Initialisation.</p>"},{"location":"api/contracts/#contracts.block_explorer","title":"<code>block_explorer</code>","text":"<p>Module to interact with the blockchain explorer.</p>"},{"location":"api/contracts/#contracts.block_explorer.BlockExplorer","title":"<code>BlockExplorer</code>  <code>dataclass</code>","text":"<p>Class to interact with the blockchain explorer.</p>"},{"location":"api/contracts/#contracts.block_explorer.BlockExplorer.get_abi","title":"<code>get_abi(address)</code>","text":"<p>Get the abi for the contract at the address.</p>"},{"location":"api/contracts/#contracts.contract","title":"<code>contract</code>","text":"<p>Module to represent a contract.</p>"},{"location":"api/contracts/#contracts.contract.Contract","title":"<code>Contract</code>","text":"<p>Class to scaffold a contract.</p>"},{"location":"api/contracts/#contracts.contract.Contract.__init__","title":"<code>__init__(author, name, abi, address=DEFAULT_NULL_ADDRESS, web3=None)</code>","text":"<p>Initialise the contract.</p>"},{"location":"api/contracts/#contracts.contract.Contract.parse_events","title":"<code>parse_events()</code>","text":"<p>We need to parse the events from the abi.</p>"},{"location":"api/contracts/#contracts.contract.Contract.parse_functions","title":"<code>parse_functions()</code>","text":"<p>Get the functions from the abi.</p>"},{"location":"api/contracts/#contracts.contract.Contract.process","title":"<code>process()</code>","text":"<p>Scaffold the contract and ensure it is written to the file system.</p>"},{"location":"api/contracts/#contracts.contract.Contract.scaffold_read_function","title":"<code>scaffold_read_function(function)</code>","text":"<p>Scaffold a read function.</p>"},{"location":"api/contracts/#contracts.contract.Contract.update_all","title":"<code>update_all()</code>","text":"<p>Scaffold the contract.</p>"},{"location":"api/contracts/#contracts.contract.Contract.update_contract_init__","title":"<code>update_contract_init__()</code>","text":"<p>Append the Public.</p>"},{"location":"api/contracts/#contracts.contract.Contract.update_contract_py","title":"<code>update_contract_py()</code>","text":"<p>Update the contract.py file. - update the class name. - update the contract_id     contract_id = PublicId.from_str(\"open_aea/scaffold:0.1.0\").</p>"},{"location":"api/contracts/#contracts.contract.Contract.update_contract_yaml","title":"<code>update_contract_yaml()</code>","text":"<p>Perform an update for the contract,yaml to specify the.</p>"},{"location":"api/contracts/#contracts.contract.Contract.write_abi_to_file","title":"<code>write_abi_to_file()</code>","text":"<p>Write the abi to a file.</p>"},{"location":"api/contracts/#contracts.contract_events","title":"<code>contract_events</code>","text":"<p>Class to represent and parse contract events.</p>"},{"location":"api/contracts/#contracts.contract_events.ContractEvent","title":"<code>ContractEvent</code>  <code>dataclass</code>","text":"<p>Data class to represent a solidity event</p>"},{"location":"api/contracts/#contracts.contract_events.ContractEvent.args","title":"<code>args()</code>","text":"<p>Return the inputs as a string.</p>"},{"location":"api/contracts/#contracts.contract_events.ContractEvent.inputs_list","title":"<code>inputs_list()</code>","text":"<p>Return the inputs as a string.</p>"},{"location":"api/contracts/#contracts.contract_events.ContractEvent.inputs_with_types","title":"<code>inputs_with_types()</code>","text":"<p>Return the inputs with names.</p>"},{"location":"api/contracts/#contracts.contract_events.ContractEvent.to_string","title":"<code>to_string()</code>","text":"<p>Return the event as a string.</p>"},{"location":"api/contracts/#contracts.contract_events.ContractEvent.vars","title":"<code>vars()</code>","text":"<p>return variable instances for the inputs.</p>"},{"location":"api/contracts/#contracts.contract_functions","title":"<code>contract_functions</code>","text":"<p>Contract functions.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction","title":"<code>ContractFunction</code>  <code>dataclass</code>","text":"<p>A class to scaffold a read function.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.function_arguments","title":"<code>function_arguments</code>  <code>property</code>","text":"<p>Parse the w3 function arguments into a string. expected format: \"arg1, arg2, arg3\".</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.function_arguments_with_types","title":"<code>function_arguments_with_types</code>  <code>property</code>","text":"<p>Parse the w3 function arguments into a string. We need to map the types to python types. expected format: \" arg1: type, arg2: type, arg3: type.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.function_description","title":"<code>function_description</code>  <code>property</code>","text":"<p>Parse the w3 function description into a string. ensure to use the input and return variables expected format: \"     arg1: type,     arg2: type,     arg3: type     return1: type,     return2: type,     return3: type.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.function_name","title":"<code>function_name</code>  <code>property</code>","text":"<p>Return the function name.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.function_return_values","title":"<code>function_return_values</code>  <code>property</code>","text":"<p>Parse the w3 function return values. expected output: return {     return1: type,     return2: type,     return3: type }.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.function_signature","title":"<code>function_signature</code>  <code>property</code>","text":"<p>Return the function signature.</p>"},{"location":"api/contracts/#contracts.contract_functions.ContractFunction.__str__","title":"<code>__str__()</code>","text":"<p>String representation.</p>"},{"location":"api/contracts/#contracts.contract_functions.FunctionType","title":"<code>FunctionType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Enum for function types.</p>"},{"location":"api/contracts/#contracts.contract_scafolder","title":"<code>contract_scafolder</code>","text":"<p>Contract scaffolder.</p>"},{"location":"api/contracts/#contracts.contract_scafolder.ContractScaffolder","title":"<code>ContractScaffolder</code>  <code>dataclass</code>","text":"<p>Class to scaffold a contract.</p>"},{"location":"api/contracts/#contracts.contract_scafolder.ContractScaffolder.from_abi","title":"<code>from_abi(path, address, name)</code>","text":"<p>Scaffold a contract from a file.</p>"},{"location":"api/contracts/#contracts.contract_scafolder.ContractScaffolder.from_block_explorer","title":"<code>from_block_explorer(address, name)</code>","text":"<p>Scaffold a contract from a block explorer.</p>"},{"location":"api/contracts/#contracts.contract_scafolder.ContractScaffolder.generate_openaea_contract","title":"<code>generate_openaea_contract(contract)</code>","text":"<p>Generate the open-aea contract. We will use the contract name to generate the class name. We need to; - use the temporary directory context manager. - create an agent - cd into the agent directory - scaffold the contract using the name. - create a new directory for the contract in the original directory. - copy the contract to the new directory.</p>"},{"location":"api/contracts/#contracts.contract_templates","title":"<code>contract_templates</code>","text":"<p>Contains the necessary templates for the contracts.</p>"},{"location":"api/contracts/#contracts.contract_templates.main","title":"<code>main(args)</code>","text":"<p>Run the main script.</p>"},{"location":"api/contracts/#contracts.function","title":"<code>function</code>","text":"<p>Function class.</p>"},{"location":"api/contracts/#contracts.function.Function","title":"<code>Function</code>  <code>dataclass</code>","text":"<p>A function of a contract.</p>"},{"location":"api/contracts/#contracts.function.Function.camel_case_name","title":"<code>camel_case_name</code>  <code>property</code>","text":"<p>Return the name of the function.</p>"},{"location":"api/contracts/#contracts.function.Function.inputs","title":"<code>inputs</code>  <code>property</code>","text":"<p>Return the inputs as variables.</p>"},{"location":"api/contracts/#contracts.function.Function.is_read_only","title":"<code>is_read_only</code>  <code>property</code>","text":"<p>Is the function read only.</p>"},{"location":"api/contracts/#contracts.function.Function.name","title":"<code>name</code>  <code>property</code>","text":"<p>Return the name of the function.</p>"},{"location":"api/contracts/#contracts.function.Function.outputs","title":"<code>outputs</code>  <code>property</code>","text":"<p>Return the outputs as variables.</p>"},{"location":"api/contracts/#contracts.function.Function.to_string","title":"<code>to_string()</code>","text":"<p>Returns the function as a string.</p>"},{"location":"api/contracts/#contracts.param_type","title":"<code>param_type</code>","text":"<p>Module contains the ParamType class, which represents the type of a parameter in solidity.</p>"},{"location":"api/contracts/#contracts.param_type.ParamType","title":"<code>ParamType</code>","text":"<p>               Bases: <code>Enum</code></p> <p>Class to represent the type of a parameter in solidity.</p>"},{"location":"api/contracts/#contracts.utils","title":"<code>utils</code>","text":"<p>Utils for the contracts.</p>"},{"location":"api/contracts/#contracts.utils.keyword_to_safe_name","title":"<code>keyword_to_safe_name(name)</code>","text":"<p>Convert a keyword to a safe name.</p>"},{"location":"api/contracts/#contracts.utils.safe_name_to_keyword","title":"<code>safe_name_to_keyword(name)</code>","text":"<p>Convert a safe name to a keyword.</p>"},{"location":"api/contracts/#contracts.variable","title":"<code>variable</code>","text":"<p>Module contains the Variable class.</p>"},{"location":"api/contracts/#contracts.variable.Variable","title":"<code>Variable</code>  <code>dataclass</code>","text":"<p>This class represent a variable in solidity.</p>"},{"location":"api/contracts/#contracts.variable.Variable.python_type","title":"<code>python_type</code>  <code>property</code>","text":"<p>Return the python type of the variable.</p>"},{"location":"api/contracts/#contracts.variable.Variable.solidity_type","title":"<code>solidity_type</code>  <code>property</code>","text":"<p>Return the solidity type of the variable.</p>"},{"location":"api/contracts/#contracts.variable.Variable.python_name","title":"<code>python_name()</code>","text":"<p>Return the python name of the variable.</p>"},{"location":"api/contracts/#contracts.variable.Variable.to_key_value","title":"<code>to_key_value()</code>","text":"<p>Parse the variable to string to be used in a key value pair.</p>"},{"location":"api/contracts/#contracts.variable.Variable.to_str_arg","title":"<code>to_str_arg()</code>","text":"<p>Parse the variable to string to be passed as an argument to a function.</p>"},{"location":"api/contracts/#contracts.variable.Variable.to_str_params","title":"<code>to_str_params()</code>","text":"<p>Parse the variable to string to be passed as a parameter to a function.</p>"},{"location":"api/contracts/#contracts.variable.Variable.to_str_return","title":"<code>to_str_return()</code>","text":"<p>Parse the variable to string to be returned by a function.</p>"},{"location":"api/fsm/","title":"FSM","text":""},{"location":"api/fsm/#fsm_1","title":"FSM","text":""},{"location":"api/fsm/#fsm","title":"<code>fsm</code>","text":"<p>Initialisation.</p>"},{"location":"api/fsm/#fsm.chain","title":"<code>chain</code>","text":"<p>Module to allow the chaining of multiple FSMs together.</p>"},{"location":"api/fsm/#fsm.chain.Chainer","title":"<code>Chainer</code>  <code>dataclass</code>","text":"<p>The chainer class allows us to chain together multiple FSMs.</p>"},{"location":"api/fsm/#fsm.chain.Chainer.chain","title":"<code>chain()</code>","text":"<p>We chain the FSMs together.</p>"},{"location":"api/fsm/#fsm.chain.Chainer.validate","title":"<code>validate()</code>","text":"<p>We validate the FSMs.</p>"},{"location":"api/fsm/#fsm.fsm","title":"<code>fsm</code>","text":"<p>Tools to parse fsm specs.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec","title":"<code>FsmSpec</code>  <code>dataclass</code>","text":"<p>We represent a fsm spec.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec.from_mermaid","title":"<code>from_mermaid(mermaid_str)</code>  <code>classmethod</code>","text":"<p>Parse a mermaid string to a FsmSpec. note, we need to create a graph like structure. we parse each line and create a node and a edge.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec.from_mermaid_path","title":"<code>from_mermaid_path(path, label)</code>  <code>classmethod</code>","text":"<p>We create a FsmSpec from a yaml file.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec.from_path","title":"<code>from_path(path)</code>  <code>classmethod</code>","text":"<p>We create a FsmSpec from a yaml file.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec.from_yaml","title":"<code>from_yaml(yaml_str, label=None)</code>  <code>classmethod</code>","text":"<p>We create a FsmSpec from a yaml string.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec.to_mermaid","title":"<code>to_mermaid()</code>","text":"<p>We convert the FsmSpec to a mermaid string.</p>"},{"location":"api/fsm/#fsm.fsm.FsmSpec.to_string","title":"<code>to_string()</code>","text":"<p>We convert the FsmSpec to a string.</p>"},{"location":"api/fsm/#fsm.fsm.validate_name","title":"<code>validate_name(name)</code>","text":"<p>Validate an fsm name.</p>"},{"location":"api/handler/","title":"Handler","text":""},{"location":"api/handler/#handler_1","title":"Handler","text":""},{"location":"api/handler/#handler","title":"<code>handler</code>","text":"<p>Initialisation.</p>"},{"location":"api/handler/#handler.scaffolder","title":"<code>scaffolder</code>","text":"<p>Handler scaffolder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffoldBuilder","title":"<code>HandlerScaffoldBuilder</code>","text":"<p>Builder for HandlerScaffolder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffoldBuilder.__init__","title":"<code>__init__()</code>","text":"<p>Initialize HandlerScaffoldBuilder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffoldBuilder.build","title":"<code>build()</code>","text":"<p>Build the scaffolder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffoldBuilder.create_scaffolder","title":"<code>create_scaffolder(spec_file_path, public_id, logger, verbose=True, new_skill=False, auto_confirm=False)</code>","text":"<p>Initialize HandlerScaffoldBuilder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder","title":"<code>HandlerScaffolder</code>","text":"<p>Handler Scaffolder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.__init__","title":"<code>__init__(config, logger)</code>","text":"<p>Initialize HandlerScaffolder.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.aea_install","title":"<code>aea_install()</code>","text":"<p>Install the aea.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.classify_post_operation","title":"<code>classify_post_operation(path, operation)</code>","text":"<p>Classify the post operation.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.confirm_action","title":"<code>confirm_action(message)</code>","text":"<p>Prompt the user for confirmation before performing an action.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.create_dialogues","title":"<code>create_dialogues()</code>","text":"<p>Create the dialogues.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.create_exceptions","title":"<code>create_exceptions()</code>","text":"<p>Create the exceptions file.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.create_new_skill","title":"<code>create_new_skill()</code>","text":"<p>Create a new skill.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.extract_schema","title":"<code>extract_schema(operation, persistent_schemas)</code>","text":"<p>Extract the schema from the operation.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.fingerprint","title":"<code>fingerprint()</code>","text":"<p>Fingerprint the skill.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.generate_handler","title":"<code>generate_handler()</code>","text":"<p>Generate handler.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.generate_method_name","title":"<code>generate_method_name(http_method, path)</code>","text":"<p>Generate method name.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.identify_persistent_schemas","title":"<code>identify_persistent_schemas(api_spec)</code>","text":"<p>Identify the persistent schemas.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.move_and_update_my_model","title":"<code>move_and_update_my_model()</code>","text":"<p>Reads in the my_model.py file and updates it. We replace the name MyModel with the name Strategy.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.present_actions","title":"<code>present_actions()</code>","text":"<p>Present the scaffold summary.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.remove_behaviours","title":"<code>remove_behaviours()</code>","text":"<p>Remove the behaviours.py file.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.sanitize_identifier","title":"<code>sanitize_identifier(name)</code>","text":"<p>Sanitize the identifier.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.save_handler","title":"<code>save_handler()</code>","text":"<p>Save handler to file.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.scaffold","title":"<code>scaffold()</code>","text":"<p>Scaffold the handler.</p>"},{"location":"api/handler/#handler.scaffolder.HandlerScaffolder.update_skill_yaml","title":"<code>update_skill_yaml(file)</code>","text":"<p>Update the skill.yaml file.</p>"},{"location":"api/handler/#handler.scaffolder.ScaffolderConfig","title":"<code>ScaffolderConfig</code>","text":"<p>Handler Scaffolder.</p>"},{"location":"api/handler/#handler.scaffolder.ScaffolderConfig.__init__","title":"<code>__init__(spec_file_path, public_id, verbose=True, new_skill=False, auto_confirm=False)</code>","text":"<p>Initialize HandlerScaffolder.</p>"},{"location":"api/protocols/","title":"Protocols","text":""},{"location":"api/protocols/#protocols_1","title":"Protocols","text":""},{"location":"api/protocols/#protocols","title":"<code>protocols</code>","text":"<p>Initialisation.</p>"},{"location":"api/protocols/#protocols.scaffolder","title":"<code>scaffolder</code>","text":"<p>Protocol scaffolder.</p>"},{"location":"api/protocols/#protocols.scaffolder.CommentSplitter","title":"<code>CommentSplitter</code>","text":"<p>               Bases: <code>NodeVisitor</code></p> <p>CommentSplitter for parsing AST.</p>"},{"location":"api/protocols/#protocols.scaffolder.CommentSplitter.split_docstring","title":"<code>split_docstring(docstring)</code>","text":"<p>Split docstring.</p>"},{"location":"api/protocols/#protocols.scaffolder.CommentSplitter.visit_FunctionDef","title":"<code>visit_FunctionDef(node)</code>","text":"<p>process the function's docstring</p>"},{"location":"api/protocols/#protocols.scaffolder.CommentSplitter.visit_Module","title":"<code>visit_Module(node)</code>","text":"<p>Process the module-level docstring</p>"},{"location":"api/protocols/#protocols.scaffolder.EnumModifier","title":"<code>EnumModifier</code>","text":"<p>EnumModifier.</p>"},{"location":"api/protocols/#protocols.scaffolder.EnumModifier.__init__","title":"<code>__init__(protocol_path, logger)</code>","text":"<p>Initialize EnumModifier.</p>"},{"location":"api/protocols/#protocols.scaffolder.EnumModifier.augment_enums","title":"<code>augment_enums()</code>","text":"<p>Agument enums.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder","title":"<code>ProtocolScaffolder</code>","text":"<p>ProtocolScaffolder.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.__init__","title":"<code>__init__(protocol_specification_path, language, logger, verbose=True)</code>","text":"<p>Initialize ProtocolScaffolder.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.clean_tests","title":"<code>clean_tests(protocol_path, protocol)</code>","text":"<p>Clean tests.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.clean_tests_dialogues","title":"<code>clean_tests_dialogues(protocol_path, protocol)</code>","text":"<p>Clean tests.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.clean_tests_messages","title":"<code>clean_tests_messages(protocol_path, protocol)</code>","text":"<p>Clean tests.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.cleanup_protocol","title":"<code>cleanup_protocol(protocol_path, protocol_author, protocol_definition, protocol_name)</code>","text":"<p>Cleanup protocol.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.generate","title":"<code>generate()</code>","text":"<p>Generate protocol.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.generate_base_models","title":"<code>generate_base_models(protocol_path, protocol_name, protocol)</code>","text":"<p>Generate base models.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.generate_pydantic_models","title":"<code>generate_pydantic_models(protocol_path, protocol_name, protocol)</code>","text":"<p>Generate data classes.</p>"},{"location":"api/protocols/#protocols.scaffolder.ProtocolScaffolder.output_pydantic_models","title":"<code>output_pydantic_models(pydantic_output, protocol_path, required_type_imports)</code>","text":"<p>Ouput the pydantic models to the custom_types.py file.</p>"},{"location":"api/protocols/#protocols.scaffolder.get_docstring_index","title":"<code>get_docstring_index(node)</code>","text":"<p>Get docstring index.</p>"},{"location":"api/protocols/#protocols.scaffolder.get_dummy_data","title":"<code>get_dummy_data(field)</code>","text":"<p>Get dummy data.</p>"},{"location":"api/protocols/#protocols.scaffolder.get_raise_statement","title":"<code>get_raise_statement(stmt)</code>","text":"<p>Get raise statement.</p>"},{"location":"api/protocols/#protocols.scaffolder.parse_enums","title":"<code>parse_enums(protocol)</code>","text":"<p>Parse enums.</p>"},{"location":"api/protocols/#protocols.scaffolder.parse_protobuf_type","title":"<code>parse_protobuf_type(protobuf_type, required_type_imports=[])</code>","text":"<p>Parse protobuf type into python type.</p>"},{"location":"api/protocols/#protocols.scaffolder.read_protocol","title":"<code>read_protocol(filepath)</code>","text":"<p>Read protocol specification.</p>"},{"location":"api/protocols/#protocols.scaffolder.split_long_comment_lines","title":"<code>split_long_comment_lines(code, max_line_length=120)</code>","text":"<p>Split long comment lines given a code string.</p>"},{"location":"api/utils/","title":"Utils","text":""},{"location":"api/utils/#utils_1","title":"Utils","text":""},{"location":"api/utils/#utils","title":"<code>utils</code>","text":"<p>Utilities for auto_dev.</p>"},{"location":"api/utils/#utils.FileLoader","title":"<code>FileLoader</code>  <code>dataclass</code>","text":"<p>File loader class.</p>"},{"location":"api/utils/#utils.FileLoader.supported_operations","title":"<code>supported_operations</code>  <code>property</code>","text":"<p>Supported operations. aligns the operations with the file type.</p>"},{"location":"api/utils/#utils.FileLoader.__post_init__","title":"<code>__post_init__()</code>","text":"<p>Post init.</p>"},{"location":"api/utils/#utils.camel_to_snake","title":"<code>camel_to_snake(string)</code>","text":"<p>Convert a string from camel case to snake case. Note: If the string is all uppercase, it will be converted to lowercase.</p>"},{"location":"api/utils/#utils.change_dir","title":"<code>change_dir(target_path)</code>","text":"<p>Temporarily change the working directory.</p>"},{"location":"api/utils/#utils.currenttz","title":"<code>currenttz()</code>","text":"<p>Return the current timezone.</p>"},{"location":"api/utils/#utils.folder_swapper","title":"<code>folder_swapper(dir_a, dir_b)</code>","text":"<p>A custom context manager that swaps the contents of two folders, allows the execution of logic within the context, and ensures the original folder contents are restored on exit, whether due to success or failure.</p>"},{"location":"api/utils/#utils.get_logger","title":"<code>get_logger(name=__name__, log_level='INFO')</code>","text":"<p>Get the configured logger.</p>"},{"location":"api/utils/#utils.get_logger--args","title":"Args:","text":"<pre><code>name (str): The name of the logger.\nlog_level (str): The logging level.\n</code></pre>"},{"location":"api/utils/#utils.get_logger--returns","title":"Returns:","text":"<pre><code>logging.Logger: Configured logger instance.\n</code></pre>"},{"location":"api/utils/#utils.get_packages","title":"<code>get_packages(autonomy_packages_file=AUTONOMY_PACKAGES_FILE, type='dev', check=True, hashmap=False)</code>","text":"<p>Get the packages file.</p>"},{"location":"api/utils/#utils.get_paths","title":"<code>get_paths(path=None, changed_only=False)</code>","text":"<p>Get the paths.</p>"},{"location":"api/utils/#utils.has_package_code_changed","title":"<code>has_package_code_changed(package_path)</code>","text":"<p>We use git to effectively check if the code has changed. We filter out any files that are ; - not tracked by git - have no changes to the code in;   - the package itself   - the tests for the package.</p>"},{"location":"api/utils/#utils.isolated_filesystem","title":"<code>isolated_filesystem(copy_cwd=False)</code>","text":"<p>Context manager to create an isolated file system. And to navigate to it and then to clean it up.</p>"},{"location":"api/utils/#utils.load_aea_config","title":"<code>load_aea_config()</code>","text":"<p>Load the aea-config.yaml file.</p>"},{"location":"api/utils/#utils.load_aea_ctx","title":"<code>load_aea_ctx(func)</code>","text":"<p>Load aea Context and AgentConfig if aea-config.yaml exists.</p>"},{"location":"api/utils/#utils.read_from_file","title":"<code>read_from_file(file_path, file_type=FileType.TEXT)</code>","text":"<p>Read content from a file.</p>"},{"location":"api/utils/#utils.remove_prefix","title":"<code>remove_prefix(text, prefix)</code>","text":"<p>str.removeprefix.</p>"},{"location":"api/utils/#utils.remove_suffix","title":"<code>remove_suffix(text, suffix)</code>","text":"<p>str.removesuffix.</p>"},{"location":"api/utils/#utils.restore_directory","title":"<code>restore_directory()</code>","text":"<p>Ensure working directory is restored.</p>"},{"location":"api/utils/#utils.snake_to_camel","title":"<code>snake_to_camel(string)</code>","text":"<p>Convert a string from snake case to camel case.</p>"},{"location":"api/utils/#utils.validate_openapi_spec","title":"<code>validate_openapi_spec(openapi_spec, logger)</code>","text":"<p>Validate an OpenAPI specification.</p>"},{"location":"api/utils/#utils.write_to_file","title":"<code>write_to_file(file_path, content, file_type=FileType.TEXT, **kwargs)</code>","text":"<p>Write content to a file.</p>"}]}